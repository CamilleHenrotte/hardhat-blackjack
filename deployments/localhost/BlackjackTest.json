{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dealerBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerBalance",
          "type": "uint256"
        }
      ],
      "name": "Blackjack__DealerHasNotEnoughCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameMustBeStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameMustNotBeStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameNotFunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__PlayerHandMustBeAPair",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Blackjack__WrongAmountToDoubleWager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DealerFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GameFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card",
          "name": "drawnCard",
          "type": "tuple"
        }
      ],
      "name": "GameHit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameLost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card",
          "name": "visibleDealerCard",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "playerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameSurrended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameTie",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomWord",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "doubleDown",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundAGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getDealerHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getDeck",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getGameStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockedProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getVisibleDealerHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_dealer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "setDealerHand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        }
      ],
      "name": "setGameStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "playerHand",
          "type": "tuple[]"
        }
      ],
      "name": "setPlayerHand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proceeds",
          "type": "uint256"
        }
      ],
      "name": "setProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "split",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surrender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "cards",
          "type": "tuple[]"
        }
      ],
      "name": "testComputeHighestValidScore",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "cards",
          "type": "tuple[]"
        }
      ],
      "name": "testComputeScore",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "testDealerPlays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "testDrawACard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "testFinishGameIfScoreIsAbove21",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card",
          "name": "card",
          "type": "tuple"
        }
      ],
      "name": "testGetCardPoints",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "testInitDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "cards",
          "type": "tuple[]"
        }
      ],
      "name": "testRemoveFirstAce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        }
      ],
      "name": "testShuffleDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewBalanceOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMoneyToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoneyToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb6c73aaa545e7a46a45bcbb032ace4ae0fc12a37c5e23c191358eff3e7786d16",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "4775014",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x747f132a2d4563d70e5f60bec2e19cca84a7e4e0bce3a8bb2ee2b3932d5d750f",
    "transactionHash": "0xb6c73aaa545e7a46a45bcbb032ace4ae0fc12a37c5e23c191358eff3e7786d16",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "4775014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "2",
    "5000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e956e809c7af4013d903eed8d4a21878",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealerBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerBalance\",\"type\":\"uint256\"}],\"name\":\"Blackjack__DealerHasNotEnoughCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameMustBeStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameMustNotBeStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameNotFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__PlayerHandMustBeAPair\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Blackjack__WrongAmountToDoubleWager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DealerFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card\",\"name\":\"drawnCard\",\"type\":\"tuple\"}],\"name\":\"GameHit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card\",\"name\":\"visibleDealerCard\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"playerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameSurrended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameTie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomWord\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"doubleDown\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getDealerHand\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getDeck\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getGameStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerHand\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getVisibleDealerHand\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_dealer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"setDealerHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"name\":\"setGameStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"playerHand\",\"type\":\"tuple[]\"}],\"name\":\"setPlayerHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proceeds\",\"type\":\"uint256\"}],\"name\":\"setProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surrender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"cards\",\"type\":\"tuple[]\"}],\"name\":\"testComputeHighestValidScore\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"cards\",\"type\":\"tuple[]\"}],\"name\":\"testComputeScore\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"testDealerPlays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"testDrawACard\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"testFinishGameIfScoreIsAbove21\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card\",\"name\":\"card\",\"type\":\"tuple\"}],\"name\":\"testGetCardPoints\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"testInitDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"cards\",\"type\":\"tuple[]\"}],\"name\":\"testRemoveFirstAce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"name\":\"testShuffleDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBalanceOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMoneyToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoneyToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/BlackjackTest.sol\":\"BlackjackTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Blackjack.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\n// ---------- Custom Errors ----------\\nerror Blackjack__DealerHasNotEnoughCollateral(uint256 dealerBalance, uint256 playerBalance);\\nerror Blackjack__GameNotFunded();\\nerror Blackjack__GameMustNotBeStarted();\\nerror Blackjack__GameMustBeStarted();\\nerror Blackjack__WrongAmountToDoubleWager(address player, uint256 amountNeeded, uint256 amountReceived);\\nerror Blackjack__PlayerHandMustBeAPair();\\nerror Blackjack__OnlyOwner();\\n\\ncontract Blackjack is VRFConsumerBaseV2 {\\n    // ---------- Chainlink VRF variables ----------\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    // ---------- Players' states and proceeds ----------\\n    address[] private s_players; // addresses of the players having more than 0 in their proceeds\\n    mapping(address => uint256) internal s_proceeds;\\n    mapping(address => GameState) internal s_states;\\n    mapping(uint256 => address) private s_requestIdToPlayer;\\n\\n    // ---------- Dealer's address ----------\\n    address payable public immutable i_dealer;\\n\\n    // ---------- Card values and suits ----------\\n    enum CardValue {\\n        Ace,\\n        Two,\\n        Three,\\n        Four,\\n        Five,\\n        Six,\\n        Seven,\\n        Eight,\\n        Nine,\\n        Ten,\\n        Jack,\\n        Queen,\\n        King\\n    }\\n    enum CardSuit {\\n        club,\\n        diamond,\\n        heart,\\n        spade\\n    }\\n    struct Card {\\n        CardValue value;\\n        CardSuit suit;\\n    }\\n\\n    // ---------- Game state for each player ----------\\n    struct GameState {\\n        Card[] dealerHand; //the first card is the hidden Card of the dealer\\n        Card[] playerHand;\\n        Card[] deck; //the deck is beeing dealt from the last card to the first one.\\n        bool isStarted;\\n    }\\n\\n    // ---------- Events ----------\\n    event GameFunded(address indexed player, uint256 amount);\\n    event DealerFunded(uint256 amount);\\n    event GameStarted(address indexed player, Card visibleDealerCard, Card[] playerHand);\\n    event GameLost(address indexed player, Card[] dealerHand);\\n    event GameTie(address indexed player, Card[] dealerHand);\\n    event GameWon(address indexed player, Card[] dealerHand);\\n    event GameSurrended(address indexed player, Card[] dealerHand);\\n    event GameHit(address indexed player, Card drawnCard);\\n    event RequestedRandomWord(address indexed player, uint256 requestId);\\n\\n    // ---------- Constructor ----------\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_dealer = payable(msg.sender);\\n    }\\n\\n    // ---------- Modifiers ----------\\n    modifier NotEnoughCollateral() {\\n        uint256 availableCollateral = getAvailableProceeds();\\n        if (availableCollateral < msg.value * 2) {\\n            revert Blackjack__DealerHasNotEnoughCollateral(availableCollateral, msg.value);\\n        }\\n        _;\\n    }\\n    modifier GameNotFunded() {\\n        if (s_proceeds[msg.sender] <= 0) {\\n            revert Blackjack__GameNotFunded();\\n        }\\n        _;\\n    }\\n    modifier GameMustNotBeStarted() {\\n        if (s_states[msg.sender].isStarted) {\\n            revert Blackjack__GameMustNotBeStarted();\\n        }\\n        _;\\n    }\\n    modifier GameMustBeStarted() {\\n        if (!s_states[msg.sender].isStarted) {\\n            revert Blackjack__GameMustBeStarted();\\n        }\\n        _;\\n    }\\n    modifier WrongAmountToDoubleWager() {\\n        if (s_proceeds[payable(msg.sender)] != msg.value) {\\n            revert Blackjack__WrongAmountToDoubleWager(msg.sender, s_proceeds[payable(msg.sender)], msg.value);\\n        }\\n        _;\\n    }\\n    modifier PlayerHandMustBeAPair() {\\n        Card[] memory playerHand = s_states[msg.sender].playerHand;\\n        bool playerHandIsAPair = playerHand.length == 2 && playerHand[0].value == playerHand[1].value;\\n        if (!playerHandIsAPair) {\\n            revert Blackjack__PlayerHandMustBeAPair();\\n        }\\n        _;\\n    }\\n    modifier OnlyOwner() {\\n        if (msg.sender != i_dealer) {\\n            revert Blackjack__OnlyOwner();\\n        }\\n\\n        _;\\n    }\\n\\n    // ---------- 1. Game Mechanics ----------\\n    function getCardPoints(Card memory card) internal pure returns (uint8) {\\n        CardValue cardValue = card.value; // Access the value from the Card struct\\n        if (cardValue == CardValue.Ace) {\\n            return 1; // Ace can be 1 or 11, but we'll return 1 as the default\\n        } else if (cardValue == CardValue.Two) {\\n            return 2;\\n        } else if (cardValue == CardValue.Three) {\\n            return 3;\\n        } else if (cardValue == CardValue.Four) {\\n            return 4;\\n        } else if (cardValue == CardValue.Five) {\\n            return 5;\\n        } else if (cardValue == CardValue.Six) {\\n            return 6;\\n        } else if (cardValue == CardValue.Seven) {\\n            return 7;\\n        } else if (cardValue == CardValue.Eight) {\\n            return 8;\\n        } else if (cardValue == CardValue.Nine) {\\n            return 9;\\n        } else if (\\n            cardValue == CardValue.Ten ||\\n            cardValue == CardValue.Jack ||\\n            cardValue == CardValue.Queen ||\\n            cardValue == CardValue.King\\n        ) {\\n            return 10;\\n        }\\n        return 0;\\n    }\\n    function initDeck(Card[] storage deck) internal {\\n        for (uint8 s = 0; s < 4; s++) {\\n            for (uint8 v = 0; v < 13; v++) {\\n                deck.push(Card(CardValue(v), CardSuit(s)));\\n            }\\n        }\\n    }\\n    function shuffleDeck(uint256 randomWord, Card[] storage deck) internal {\\n        for (uint8 i = 51; i > 0; i--) {\\n            uint8 j = uint8(uint256(keccak256(abi.encode(randomWord, i))) % (i + 1));\\n            Card memory temp = deck[i];\\n            deck[i] = deck[j];\\n            deck[j] = temp;\\n        }\\n    }\\n    // Draw a card from the deck (removes the last element and returns it)\\n    function drawACard(Card[] storage deck) internal returns (Card memory) {\\n        require(deck.length > 0, \\\"Deck is empty\\\");\\n        Card memory drawnCard = deck[deck.length - 1];\\n        deck.pop();\\n        return drawnCard;\\n    }\\n    function finishGameIfScoreAbove21(GameState storage gameState, address player) internal {\\n        uint8 score = computeHighestValidScore(gameState.playerHand);\\n        if (score > 21) {\\n            emit GameLost(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = 0;\\n            removeElement(s_players, player);\\n        } else if (score == 21) {\\n            uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\\n            if (dealerScore == 21) {\\n                emit GameTie(player, gameState.dealerHand);\\n                delete s_states[player];\\n            } else {\\n                emit GameWon(player, gameState.dealerHand);\\n                delete s_states[player];\\n                s_proceeds[player] += s_proceeds[player] / 2;\\n            }\\n        }\\n    }\\n    function removeElement(address[] storage array, address value) internal {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (array[i] == value) {\\n                array[i] = array[array.length - 1]; // Replace with the last element\\n                array.pop(); // Remove the last element\\n                break;\\n            }\\n        }\\n    }\\n    function removeFirstAce(Card[] memory cards) internal pure returns (bool, Card[] memory) {\\n        for (uint8 i = 0; i < cards.length; i++) {\\n            if (cards[i].value == CardValue.Ace) {\\n                // Remove the Ace by shifting elements to the left\\n                for (uint8 j = i; j < cards.length - 1; j++) {\\n                    cards[j] = cards[j + 1];\\n                }\\n                // Reduce the array length by 1\\n                assembly {\\n                    mstore(cards, sub(mload(cards), 1))\\n                }\\n                return (true, cards);\\n            }\\n        }\\n        return (false, cards); // No Ace found, return unchanged array\\n    }\\n    function computeScore(Card[] memory cards) internal pure returns (uint8) {\\n        uint8 score = 0;\\n        for (uint8 i = 0; i < cards.length; i++) {\\n            score = score + getCardPoints(cards[i]);\\n        }\\n        return score;\\n    }\\n    function computeHighestValidScore(Card[] memory cards) internal pure returns (uint8) {\\n        uint8 score;\\n        (bool hasAce, Card[] memory cardsWhithoutFirstAce) = removeFirstAce(cards);\\n        if (hasAce) {\\n            uint8 highScore = 11 + computeScore(cardsWhithoutFirstAce);\\n            if (highScore > 21) {\\n                uint8 lowScore = 1 + computeScore(cardsWhithoutFirstAce);\\n                score = lowScore;\\n            } else {\\n                score = highScore;\\n            }\\n        } else {\\n            score = computeScore(cards);\\n        }\\n        return score;\\n    }\\n    function dealerPlays(GameState storage gameState) internal {\\n        uint8 score = computeHighestValidScore(gameState.dealerHand);\\n        while (score < 17) {\\n            gameState.dealerHand.push(drawACard(gameState.deck));\\n            score = computeHighestValidScore(gameState.dealerHand);\\n        }\\n    }\\n\\n    // ---------- 2. Player Actions ----------\\n    function hit() public GameMustBeStarted {\\n        address player = msg.sender;\\n        GameState storage gameState = s_states[player];\\n        Card memory card = drawACard(gameState.deck);\\n        gameState.playerHand.push(card);\\n        emit GameHit(player, card);\\n        finishGameIfScoreAbove21(gameState, player);\\n    }\\n    function stand() public GameMustBeStarted {\\n        GameState storage gameState = s_states[msg.sender];\\n        address player = msg.sender;\\n        uint8 playerScore = computeHighestValidScore(gameState.playerHand);\\n        uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\\n        dealerPlays(gameState);\\n        if (playerScore == dealerScore) {\\n            emit GameTie(player, gameState.dealerHand);\\n            delete s_states[player];\\n        } else if (playerScore < dealerScore) {\\n            emit GameLost(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = 0;\\n            removeElement(s_players, player);\\n        } else {\\n            emit GameWon(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = s_proceeds[player] * 2;\\n        }\\n    }\\n    function doubleDown() public payable GameMustBeStarted WrongAmountToDoubleWager {\\n        s_proceeds[msg.sender] += msg.value;\\n        hit();\\n        stand();\\n    }\\n    function split() public payable GameMustBeStarted WrongAmountToDoubleWager PlayerHandMustBeAPair {\\n        s_proceeds[msg.sender] += msg.value;\\n        address player = msg.sender;\\n        GameState storage gameState = s_states[player];\\n        gameState.playerHand.pop();\\n    }\\n    function surrender() public GameMustBeStarted {\\n        GameState storage gameState = s_states[msg.sender];\\n        s_proceeds[msg.sender] -= s_proceeds[msg.sender] / 2;\\n        delete s_states[msg.sender];\\n        emit GameSurrended(msg.sender, gameState.dealerHand);\\n    }\\n\\n    // ---------- 3. Chainlink VRF and Game Start ----------\\n    function startAGame() public GameNotFunded GameMustNotBeStarted {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            1\\n        );\\n        s_requestIdToPlayer[requestId] = msg.sender;\\n        emit RequestedRandomWord(msg.sender, requestId);\\n    }\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        address player = s_requestIdToPlayer[requestId];\\n        GameState storage gameState = s_states[player];\\n        initDeck(gameState.deck);\\n        shuffleDeck(randomWords[0], gameState.deck);\\n\\n        gameState.dealerHand.push(drawACard(gameState.deck));\\n        gameState.dealerHand.push(drawACard(gameState.deck));\\n        gameState.playerHand.push(drawACard(gameState.deck));\\n        gameState.playerHand.push(drawACard(gameState.deck));\\n        gameState.isStarted = true;\\n        emit GameStarted(player, gameState.dealerHand[1], gameState.playerHand);\\n        finishGameIfScoreAbove21(gameState, player);\\n        delete s_requestIdToPlayer[requestId];\\n    }\\n\\n    // ---------- 4. Dealer Fund and Proceeds Management ----------\\n    receive() external payable {\\n        emit DealerFunded(msg.value);\\n    }\\n    function getLockedProceeds() public view returns (uint256) {\\n        uint256 lockedProceeds = 0;\\n        for (uint256 i = 0; i < s_players.length; i += 1) {\\n            lockedProceeds += s_proceeds[s_players[i]];\\n        }\\n        return lockedProceeds;\\n    }\\n    function getAvailableProceeds() public view returns (uint256) {\\n        uint256 balance = viewBalanceOfOwner();\\n        uint256 lockedProceeds = getLockedProceeds() * 2;\\n        if (lockedProceeds > balance) {\\n            return 0;\\n        }\\n        return balance - lockedProceeds;\\n    }\\n    function withdrawMoneyToOwner(uint256 amount) external OnlyOwner {\\n        uint256 maximumAmount = getAvailableProceeds();\\n        if (amount > maximumAmount) {\\n            amount = maximumAmount;\\n        }\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function fundAGame() external payable NotEnoughCollateral GameMustNotBeStarted {\\n        s_players.push(msg.sender);\\n        s_proceeds[payable(msg.sender)] = msg.value;\\n        emit GameFunded(msg.sender, msg.value);\\n    }\\n\\n    function viewBalanceOfOwner() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    function getProceeds(address player) public view returns (uint256) {\\n        return s_proceeds[player];\\n    }\\n    function withdrawMoneyToPlayer() public GameMustNotBeStarted {\\n        removeElement(s_players, msg.sender);\\n        (bool success, ) = payable(msg.sender).call{value: s_proceeds[msg.sender]}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    // ---------- 5. View game state functions ----------\\n    function getPlayerHand(address player) public view returns (Card[] memory) {\\n        return s_states[player].playerHand;\\n    }\\n    function getVisibleDealerHand(address player) public view returns (Card[] memory) {\\n        Card[] memory fullHand = s_states[player].dealerHand;\\n        uint256 startIndex = 1;\\n        require(startIndex < fullHand.length, \\\"Start index out of bounds\\\");\\n        uint256 newLength = fullHand.length - startIndex;\\n        Card[] memory visibleHand = new Card[](newLength);\\n        for (uint256 i = 0; i < newLength; i++) {\\n            visibleHand[i] = fullHand[startIndex + i];\\n        }\\n        return visibleHand;\\n    }\\n    function getGameStatus(address player) public view returns (bool) {\\n        return s_states[player].isStarted;\\n    }\\n    function getPlayers() public view returns (address[] memory) {\\n        return s_players;\\n    }\\n}\\n\",\"keccak256\":\"0x9edb13f03902ac13d528a8d8433dee2617c1d1aad8e651c4b19d2a610e2e40ec\",\"license\":\"UNLICENSED\"},\"contracts/test/BlackjackTest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Blackjack.sol\\\";\\n\\ncontract BlackjackTest is Blackjack {\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) Blackjack(vrfCoordinatorV2, gasLane, subscriptionId, callbackGasLimit) {}\\n    function testGetCardPoints(Card memory card) public pure returns (uint8) {\\n        return super.getCardPoints(card);\\n    }\\n    function testInitDeck(address player) public {\\n        GameState storage gameState = s_states[player];\\n        super.initDeck(gameState.deck);\\n    }\\n\\n    function setPlayerHand(address player, Card[] memory playerHand) public {\\n        for (uint i = 0; i < playerHand.length; i++) {\\n            s_states[player].playerHand.push(playerHand[i]);\\n        }\\n    }\\n    function setDealerHand(address player, Card[] memory dealerHand) public {\\n        for (uint i = 0; i < dealerHand.length; i++) {\\n            s_states[player].dealerHand.push(dealerHand[i]);\\n        }\\n    }\\n    function setProceeds(address player, uint256 proceeds) public {\\n        s_proceeds[player] = proceeds;\\n    }\\n    function setGameStatus(address player, bool isStarted) public {\\n        s_states[player].isStarted = isStarted;\\n    }\\n    function getDeck(address player) public view returns (Card[] memory) {\\n        return s_states[player].deck;\\n    }\\n    function getDealerHand(address player) public view returns (Card[] memory) {\\n        return s_states[player].dealerHand;\\n    }\\n\\n    function testShuffleDeck(address player, uint256 randomWord) public {\\n        super.shuffleDeck(randomWord, s_states[player].deck);\\n    }\\n    function testDrawACard(address player) public returns (Card memory) {\\n        return super.drawACard(s_states[player].deck);\\n    }\\n    function testFinishGameIfScoreIsAbove21(address player) public {\\n        super.finishGameIfScoreAbove21(s_states[player], player);\\n    }\\n    function testRemoveFirstAce(Card[] memory cards) public pure returns (bool, Card[] memory) {\\n        return super.removeFirstAce(cards);\\n    }\\n    function testComputeScore(Card[] memory cards) public pure returns (uint8) {\\n        return super.computeScore(cards);\\n    }\\n    function testComputeHighestValidScore(Card[] memory cards) public pure returns (uint8) {\\n        return super.computeHighestValidScore(cards);\\n    }\\n    function testDealerPlays(address player) public {\\n        super.dealerPlays(s_states[player]);\\n    }\\n}\\n\",\"keccak256\":\"0x99296597155d7ec33c0a5594e320c6dbf227cf96a5fc193be2c69943655555fc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620058853803806200588583398181016040528101906200003891906200024d565b83838383838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508260a081815250508167ffffffffffffffff1660c08167ffffffffffffffff16815250508063ffffffff166101008163ffffffff16815250503373ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250505050505050505050620002bf565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001548262000127565b9050919050565b620001668162000147565b81146200017257600080fd5b50565b60008151905062000186816200015b565b92915050565b6000819050919050565b620001a1816200018c565b8114620001ad57600080fd5b50565b600081519050620001c18162000196565b92915050565b600067ffffffffffffffff82169050919050565b620001e681620001c7565b8114620001f257600080fd5b50565b6000815190506200020681620001db565b92915050565b600063ffffffff82169050919050565b62000227816200020c565b81146200023357600080fd5b50565b60008151905062000247816200021c565b92915050565b600080600080608085870312156200026a576200026962000122565b5b60006200027a8782880162000175565b94505060206200028d87828801620001b0565b9350506040620002a087828801620001f5565b9250506060620002b38782880162000236565b91505092959194509250565b60805160a05160c05160e05161010051610120516155686200031d600039600081816107f601526112dd01526000612531015260006124b10152600061250e015260006124ed015260008181610944015261099801526155686000f3fe6080604052600436106101fd5760003560e01c806396e0a8151161010d578063bf4059a1116100a0578063de550f4f1161006f578063de550f4f1461072e578063e3913d6c14610745578063f18e991b14610782578063f2fa7d63146107ad578063f7654176146107d85761023b565b8063bf4059a114610688578063c2897b10146106b1578063c2b1e3db146106c8578063cece2fa0146106f15761023b565b8063b02a97bf116100dc578063b02a97bf146105ce578063b5c9ab001461060b578063b71c47a214610648578063bb851db91461065f5761023b565b806396e0a81514610520578063991a396114610549578063a7e1f6a214610586578063ac33a56a146105905761023b565b806338a34a19116101905780637aad0b321161015f5780637aad0b321461043957806384dbffb0146104625780638a4d93c31461048d5780638b5b9ccc146104ca578063969a2fbd146104f55761023b565b806338a34a19146103b257806354e4437e146103db5780635d2c7fb5146104185780637517b4631461042f5761023b565b80632ae3594a116101cc5780632ae3594a146102f857806330cfeda91461030f57806335d17c611461034c57806336dce9ef146103895761023b565b8063139761021461024057806316b8880e1461027d5780631fe543e3146102a657806322ec89f0146102cf5761023b565b3661023b577f953e2e776da7b08f66a1eb7d5aba63c96be4e6d392519da47f532ec4f6096c2c3460405161023191906143a7565b60405180910390a1005b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906145ce565b6107e2565b6040516102749190614633565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f919061467a565b6107f4565b005b3480156102b257600080fd5b506102cd60048036038101906102c8919061476a565b610942565b005b3480156102db57600080fd5b506102f660048036038101906102f19190614824565b610a02565b005b34801561030457600080fd5b5061030d610a4c565b005b34801561031b57600080fd5b5061033660048036038101906103319190614824565b610c13565b60405161034391906143a7565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e9190614824565b610c5c565b60405161038091906149ee565b60405180910390f35b34801561039557600080fd5b506103b060048036038101906103ab9190614a48565b610d6f565b005b3480156103be57600080fd5b506103d960048036038101906103d49190614a88565b610dcd565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190614824565b610ed5565b60405161040f9190614af3565b60405180910390f35b34801561042457600080fd5b5061042d610f2e565b005b6104376110ae565b005b34801561044557600080fd5b50610460600480360381019061045b9190614b0e565b61128c565b005b34801561046e57600080fd5b506104776112db565b6040516104849190614b6f565b60405180910390f35b34801561049957600080fd5b506104b460048036038101906104af9190614824565b6112ff565b6040516104c191906149ee565b60405180910390f35b3480156104d657600080fd5b506104df611530565b6040516104ec9190614c48565b60405180910390f35b34801561050157600080fd5b5061050a6115be565b60405161051791906143a7565b60405180910390f35b34801561052c57600080fd5b5061054760048036038101906105429190614b0e565b61160a565b005b34801561055557600080fd5b50610570600480360381019061056b9190614c6a565b611652565b60405161057d9190614633565b60405180910390f35b61058e611664565b005b34801561059c57600080fd5b506105b760048036038101906105b291906145ce565b611818565b6040516105c5929190614c97565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906145ce565b61182e565b6040516106029190614633565b60405180910390f35b34801561061757600080fd5b50610632600480360381019061062d9190614824565b611840565b60405161063f9190614cf6565b60405180910390f35b34801561065457600080fd5b5061065d611899565b005b34801561066b57600080fd5b5061068660048036038101906106819190614824565b611add565b005b34801561069457600080fd5b506106af60048036038101906106aa9190614a88565b611b28565b005b3480156106bd57600080fd5b506106c6611c30565b005b3480156106d457600080fd5b506106ef60048036038101906106ea9190614824565b612248565b005b3480156106fd57600080fd5b5061071860048036038101906107139190614824565b61229b565b60405161072591906149ee565b60405180910390f35b34801561073a57600080fd5b506107436123ae565b005b34801561075157600080fd5b5061076c60048036038101906107679190614824565b61265a565b60405161077991906149ee565b60405180910390f35b34801561078e57600080fd5b5061079761276d565b6040516107a491906143a7565b60405180910390f35b3480156107b957600080fd5b506107c2612775565b6040516107cf91906143a7565b60405180910390f35b6107e0612832565b005b60006107ed82612c2e565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610879576040517f0cbb466000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108836115be565b905080821115610891578091505b60003373ffffffffffffffffffffffffffffffffffffffff16836040516108b790614d42565b60006040518083038185875af1925050503d80600081146108f4576040519150601f19603f3d011682016040523d82523d6000602084013e6108f9565b606091505b505090508061093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490614db4565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109f457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016109eb929190614de3565b60405180910390fd5b6109fe8282612c94565b5050565b610a49600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613075565b50565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610ad2576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610b28826002016132d0565b905081600101819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115610b7f57610b7e61487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115610baf57610bae61487d565b5b021790555050508273ffffffffffffffffffffffffffffffffffffffff167fa00526ac35293338c4995804bb6d15732b3e5ca08b009ef10680c36364a20a4682604051610bfc9190614cf6565b60405180910390a2610c0e8284613428565b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b82821015610d64578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115610d0457610d0361487d565b5b600c811115610d1657610d1561487d565b5b81526020016000820160019054906101000a900460ff166003811115610d3f57610d3e61487d565b5b6003811115610d5157610d5061487d565b5b8152505081526020019060010190610cc0565b505050509050919050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505050565b60005b8151811015610ed057600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828281518110610e2e57610e2d614e0c565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115610e8657610e8561487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115610eb657610eb561487d565b5b021790555050508080610ec890614e6a565b915050610dd0565b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff169050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615610fb5576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fc0600033613983565b60003373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161102590614d42565b60006040518083038185875af1925050503d8060008114611062576040519150601f19603f3d011682016040523d82523d6000602084013e611067565b606091505b50509050806110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a290614db4565b60405180910390fd5b50565b60006110b86115be565b90506002346110c79190614eb2565b81101561110d5780346040517fd8c7dbf2000000000000000000000000000000000000000000000000000000008152600401611104929190614ef4565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611194576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f5c963fd7fde519af29d56159e6e3e18db4e5d3e4716c39c87958cf9e4862ed583460405161128191906143a7565b60405180910390a250565b6112d781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613b0e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b82821015611409578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156113a9576113a861487d565b5b600c8111156113bb576113ba61487d565b5b81526020016000820160019054906101000a900460ff1660038111156113e4576113e361487d565b5b60038111156113f6576113f561487d565b5b8152505081526020019060010190611365565b50505050905060006001905081518110611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144f90614f69565b60405180910390fd5b60008183516114679190614f89565b905060008167ffffffffffffffff811115611485576114846143ec565b5b6040519080825280602002602001820160405280156114be57816020015b6114ab6142f0565b8152602001906001900390816114a35790505b50905060005b82811015611523578481856114d99190614fbd565b815181106114ea576114e9614e0c565b5b602002602001015182828151811061150557611504614e0c565b5b6020026020010181905250808061151b90614e6a565b9150506114c4565b5080945050505050919050565b606060008054806020026020016040519081016040528092919081815260200182805480156115b457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161156a575b5050505050905090565b6000806115c961276d565b9050600060026115d7612775565b6115e19190614eb2565b9050818111156115f657600092505050611607565b80826116029190614f89565b925050505b90565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600061165d82613d6b565b9050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166116ea576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146117b05733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa00000000000000000000000000000000000000000000000000000000081526004016117a793929190614ff1565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117ff9190614fbd565b9250508190555061180e610a4c565b611816611c30565b565b6000606061182583614029565b91509150915091565b60006118398261413b565b9050919050565b6118486142f0565b611892600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016132d0565b9050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661191f576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119ae9190615057565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119fc9190614f89565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611a53919061432e565b600182016000611a63919061432e565b600282016000611a73919061432e565b6003820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff167f1c3d254fb838c7352a6e848b11d4a6e0e41f6fc9b62f9d10fe739e428b6cd04f82600001604051611ad291906151d2565b60405180910390a250565b611b25600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082613428565b50565b60005b8151811015611c2b57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101828281518110611b8957611b88614e0c565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115611be157611be061487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115611c1157611c1061487d565b5b021790555050508080611c2390614e6a565b915050611b2b565b505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611cb6576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060003390506000611dd483600101805480602002602001604051908101604052809291908181526020016000905b82821015611dcb578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115611d6b57611d6a61487d565b5b600c811115611d7d57611d7c61487d565b5b81526020016000820160019054906101000a900460ff166003811115611da657611da561487d565b5b6003811115611db857611db761487d565b5b8152505081526020019060010190611d27565b5050505061413b565b90506000611eac84600001805480602002602001604051908101604052809291908181526020016000905b82821015611ea3578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115611e4357611e4261487d565b5b600c811115611e5557611e5461487d565b5b81526020016000820160019054906101000a900460ff166003811115611e7e57611e7d61487d565b5b6003811115611e9057611e8f61487d565b5b8152505081526020019060010190611dff565b5050505061413b565b9050611eb784613075565b8060ff168260ff1603611fa0578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e85600001604051611f0d91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611f65919061432e565b600182016000611f75919061432e565b600282016000611f85919061432e565b6003820160006101000a81549060ff02191690555050612242565b8060ff168260ff1610156120da578273ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a285600001604051611ff791906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061204f919061432e565b60018201600061205f919061432e565b60028201600061206f919061432e565b6003820160006101000a81549060ff021916905550506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120d5600084613983565b612241565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e88560000160405161212391906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061217b919061432e565b60018201600061218b919061432e565b60028201600061219b919061432e565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121fd9190614eb2565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612297816002016141bc565b5050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156123a3578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156123435761234261487d565b5b600c8111156123555761235461487d565b5b81526020016000820160019054906101000a900460ff16600381111561237e5761237d61487d565b5b60038111156123905761238f61487d565b5b81525050815260200190600101906122ff565b505050509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612426576040517eca21b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16156124ad576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016125729594939291906152b1565b6020604051808303816000875af1158015612591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b59190615319565b9050336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ff25b42314a7b32046c40e6d73a9308e47dd11531745977093de43c966a450f988260405161264f91906143a7565b60405180910390a250565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805480602002602001604051908101604052809291908181526020016000905b82821015612762578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156127025761270161487d565b5b600c8111156127145761271361487d565b5b81526020016000820160019054906101000a900460ff16600381111561273d5761273c61487d565b5b600381111561274f5761274e61487d565b5b81525050815260200190600101906126be565b505050509050919050565b600047905090565b6000806000905060005b60008054905081101561282a57600160008083815481106127a3576127a2614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826128149190614fbd565b91506001816128239190614fbd565b905061277f565b508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166128b8576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461297e5733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa000000000000000000000000000000000000000000000000000000000815260040161297593929190614ff1565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015612a86578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115612a2657612a2561487d565b5b600c811115612a3857612a3761487d565b5b81526020016000820160019054906101000a900460ff166003811115612a6157612a6061487d565b5b6003811115612a7357612a7261487d565b5b81525050815260200190600101906129e2565b505050509050600060028251148015612b00575081600181518110612aae57612aad614e0c565b5b602002602001015160000151600c811115612acc57612acb61487d565b5b82600081518110612ae057612adf614e0c565b5b602002602001015160000151600c811115612afe57612afd61487d565b5b145b905080612b39576040517f32a7a66300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b889190614fbd565b9250508190555060003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600101805480612beb57612bea615346565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905550505050565b6000806000905060005b83518160ff161015612c8a57612c6a848260ff1681518110612c5d57612c5c614e0c565b5b6020026020010151613d6b565b82612c759190615375565b91508080612c82906153aa565b915050612c38565b5080915050919050565b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612d1b816002016141bc565b612d4383600081518110612d3257612d31614e0c565b5b602002602001015182600201613b0e565b80600001612d53826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612da357612da261487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612dd357612dd261487d565b5b0217905550505080600001612dea826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612e3a57612e3961487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612e6a57612e6961487d565b5b0217905550505080600101612e81826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612ed157612ed061487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612f0157612f0061487d565b5b0217905550505080600101612f18826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612f6857612f6761487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612f9857612f9761487d565b5b0217905550505060018160030160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc3526b989b2c50fdd238cba2622a708296aa7d7deabacb893b6fc4c5b68acb1f8260000160018154811061300b5761300a614e0c565b5b9060005260206000200183600101604051613027929190615413565b60405180910390a26130398183613428565b6003600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505050565b600061314b82600001805480602002602001604051908101604052809291908181526020016000905b82821015613142578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156130e2576130e161487d565b5b600c8111156130f4576130f361487d565b5b81526020016000820160019054906101000a900460ff16600381111561311d5761311c61487d565b5b600381111561312f5761312e61487d565b5b815250508152602001906001019061309e565b5050505061413b565b90505b60118160ff1610156132cc578160000161316a836002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c8111156131ba576131b961487d565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156131ea576131e961487d565b5b021790555050506132c582600001805480602002602001604051908101604052809291908181526020016000905b828210156132bc578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561325c5761325b61487d565b5b600c81111561326e5761326d61487d565b5b81526020016000820160019054906101000a900460ff1660038111156132975761329661487d565b5b60038111156132a9576132a861487d565b5b8152505081526020019060010190613218565b5050505061413b565b905061314e565b5050565b6132d86142f0565b600082805490501161331f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133169061548f565b60405180910390fd5b600082600184805490506133339190614f89565b8154811061334457613343614e0c565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561337e5761337d61487d565b5b600c8111156133905761338f61487d565b5b81526020016000820160019054906101000a900460ff1660038111156133b9576133b861487d565b5b60038111156133cb576133ca61487d565b5b815250509050828054806133e2576133e1615346565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905580915050919050565b60006134fe83600101805480602002602001604051908101604052809291908181526020016000905b828210156134f5578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156134955761349461487d565b5b600c8111156134a7576134a661487d565b5b81526020016000820160019054906101000a900460ff1660038111156134d0576134cf61487d565b5b60038111156134e2576134e161487d565b5b8152505081526020019060010190613451565b5050505061413b565b905060158160ff161115613638578173ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a28460000160405161355591906151d2565b60405180910390a2600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006135ad919061432e565b6001820160006135bd919061432e565b6002820160006135cd919061432e565b6003820160006101000a81549060ff021916905550506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613633600083613983565b61397e565b60158160ff160361397d57600061371984600001805480602002602001604051908101604052809291908181526020016000905b82821015613710578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156136b0576136af61487d565b5b600c8111156136c2576136c161487d565b5b81526020016000820160019054906101000a900460ff1660038111156136eb576136ea61487d565b5b60038111156136fd576136fc61487d565b5b815250508152602001906001019061366c565b5050505061413b565b905060158160ff1603613802578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e8560000160405161376f91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006137c7919061432e565b6001820160006137d7919061432e565b6002820160006137e7919061432e565b6003820160006101000a81549060ff0219169055505061397b565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e88560000160405161384b91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006138a3919061432e565b6001820160006138b3919061432e565b6002820160006138c3919061432e565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139259190615057565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139739190614fbd565b925050819055505b505b5b505050565b60005b8280549050811015613b09578173ffffffffffffffffffffffffffffffffffffffff168382815481106139bc576139bb614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613af6578260018480549050613a149190614f89565b81548110613a2557613a24614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110613a6357613a62614e0c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480613abc57613abb615346565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055613b09565b8080613b0190614e6a565b915050613986565b505050565b6000603390505b60008160ff161115613d66576000600182613b309190615375565b60ff168483604051602001613b469291906154af565b6040516020818303038152906040528051906020012060001c613b6991906154d8565b90506000838360ff1681548110613b8357613b82614e0c565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115613bbd57613bbc61487d565b5b600c811115613bcf57613bce61487d565b5b81526020016000820160019054906101000a900460ff166003811115613bf857613bf761487d565b5b6003811115613c0a57613c0961487d565b5b815250509050838260ff1681548110613c2657613c25614e0c565b5b90600052602060002001848460ff1681548110613c4657613c45614e0c565b5b906000526020600020016000820160009054906101000a900460ff168160000160006101000a81548160ff0219169083600c811115613c8857613c8761487d565b5b02179055506000820160019054906101000a900460ff168160000160016101000a81548160ff02191690836003811115613cc557613cc461487d565b5b021790555090505080848360ff1681548110613ce457613ce3614e0c565b5b9060005260206000200160008201518160000160006101000a81548160ff0219169083600c811115613d1957613d1861487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115613d4957613d4861487d565b5b021790555090505050508080613d5e90615509565b915050613b15565b505050565b600080826000015190506000600c811115613d8957613d8861487d565b5b81600c811115613d9c57613d9b61487d565b5b03613dab576001915050614024565b6001600c811115613dbf57613dbe61487d565b5b81600c811115613dd257613dd161487d565b5b03613de1576002915050614024565b6002600c811115613df557613df461487d565b5b81600c811115613e0857613e0761487d565b5b03613e17576003915050614024565b6003600c811115613e2b57613e2a61487d565b5b81600c811115613e3e57613e3d61487d565b5b03613e4d576004915050614024565b6004600c811115613e6157613e6061487d565b5b81600c811115613e7457613e7361487d565b5b03613e83576005915050614024565b6005600c811115613e9757613e9661487d565b5b81600c811115613eaa57613ea961487d565b5b03613eb9576006915050614024565b6006600c811115613ecd57613ecc61487d565b5b81600c811115613ee057613edf61487d565b5b03613eef576007915050614024565b6007600c811115613f0357613f0261487d565b5b81600c811115613f1657613f1561487d565b5b03613f25576008915050614024565b6008600c811115613f3957613f3861487d565b5b81600c811115613f4c57613f4b61487d565b5b03613f5b576009915050614024565b6009600c811115613f6f57613f6e61487d565b5b81600c811115613f8257613f8161487d565b5b1480613fb25750600a600c811115613f9d57613f9c61487d565b5b81600c811115613fb057613faf61487d565b5b145b80613fe15750600b600c811115613fcc57613fcb61487d565b5b81600c811115613fdf57613fde61487d565b5b145b8061400f5750600c80811115613ffa57613ff961487d565b5b81600c81111561400d5761400c61487d565b5b145b1561401e57600a915050614024565b60009150505b919050565b6000606060005b83518160ff16101561412d576000600c8111156140505761404f61487d565b5b848260ff168151811061406657614065614e0c565b5b602002602001015160000151600c8111156140845761408361487d565b5b0361411a5760008190505b6001855161409d9190614f89565b8160ff16101561410557846001826140b59190615375565b60ff16815181106140c9576140c8614e0c565b5b6020026020010151858260ff16815181106140e7576140e6614e0c565b5b602002602001018190525080806140fd906153aa565b91505061408f565b50600184510384526001849250925050614136565b8080614125906153aa565b915050614030565b50600083915091505b915091565b60008060008061414a85614029565b9150915081156141a557600061415f82612c2e565b600b61416b9190615375565b905060158160ff16111561419b57600061418483612c2e565b60016141909190615375565b90508094505061419f565b8093505b506141b1565b6141ae85612c2e565b92505b829350505050919050565b60005b60048160ff1610156142ec5760005b600d8160ff1610156142d8578260405180604001604052808360ff16600c8111156141fc576141fb61487d565b5b600c81111561420e5761420d61487d565b5b81526020018460ff1660038111156142295761422861487d565b5b600381111561423b5761423a61487d565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561428e5761428d61487d565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156142be576142bd61487d565b5b0217905550505080806142d0906153aa565b9150506141ce565b5080806142e4906153aa565b9150506141bf565b5050565b60405180604001604052806000600c81111561430f5761430e61487d565b5b8152602001600060038111156143285761432761487d565b5b81525090565b508054600082559060005260206000209081019061434c919061434f565b50565b5b8082111561438a57600080820160006101000a81549060ff02191690556000820160016101000a81549060ff021916905550600101614350565b5090565b6000819050919050565b6143a18161438e565b82525050565b60006020820190506143bc6000830184614398565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614424826143db565b810181811067ffffffffffffffff82111715614443576144426143ec565b5b80604052505050565b60006144566143c2565b9050614462828261441b565b919050565b600067ffffffffffffffff821115614482576144816143ec565b5b602082029050602081019050919050565b600080fd5b600080fd5b600d81106144aa57600080fd5b50565b6000813590506144bc8161449d565b92915050565b600481106144cf57600080fd5b50565b6000813590506144e1816144c2565b92915050565b6000604082840312156144fd576144fc614498565b5b614507604061444c565b90506000614517848285016144ad565b600083015250602061452b848285016144d2565b60208301525092915050565b600061454a61454584614467565b61444c565b9050808382526020820190506040840283018581111561456d5761456c614493565b5b835b81811015614596578061458288826144e7565b84526020840193505060408101905061456f565b5050509392505050565b600082601f8301126145b5576145b46143d6565b5b81356145c5848260208601614537565b91505092915050565b6000602082840312156145e4576145e36143cc565b5b600082013567ffffffffffffffff811115614602576146016143d1565b5b61460e848285016145a0565b91505092915050565b600060ff82169050919050565b61462d81614617565b82525050565b60006020820190506146486000830184614624565b92915050565b6146578161438e565b811461466257600080fd5b50565b6000813590506146748161464e565b92915050565b6000602082840312156146905761468f6143cc565b5b600061469e84828501614665565b91505092915050565b600067ffffffffffffffff8211156146c2576146c16143ec565b5b602082029050602081019050919050565b60006146e66146e1846146a7565b61444c565b9050808382526020820190506020840283018581111561470957614708614493565b5b835b81811015614732578061471e8882614665565b84526020840193505060208101905061470b565b5050509392505050565b600082601f830112614751576147506143d6565b5b81356147618482602086016146d3565b91505092915050565b60008060408385031215614781576147806143cc565b5b600061478f85828601614665565b925050602083013567ffffffffffffffff8111156147b0576147af6143d1565b5b6147bc8582860161473c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006147f1826147c6565b9050919050565b614801816147e6565b811461480c57600080fd5b50565b60008135905061481e816147f8565b92915050565b60006020828403121561483a576148396143cc565b5b60006148488482850161480f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600d81106148bd576148bc61487d565b5b50565b60008190506148ce826148ac565b919050565b60006148de826148c0565b9050919050565b6148ee816148d3565b82525050565b600481106149055761490461487d565b5b50565b6000819050614916826148f4565b919050565b600061492682614908565b9050919050565b6149368161491b565b82525050565b60408201600082015161495260008501826148e5565b506020820151614965602085018261492d565b50505050565b6000614977838361493c565b60408301905092915050565b6000602082019050919050565b600061499b82614851565b6149a5818561485c565b93506149b08361486d565b8060005b838110156149e15781516149c8888261496b565b97506149d383614983565b9250506001810190506149b4565b5085935050505092915050565b60006020820190508181036000830152614a088184614990565b905092915050565b60008115159050919050565b614a2581614a10565b8114614a3057600080fd5b50565b600081359050614a4281614a1c565b92915050565b60008060408385031215614a5f57614a5e6143cc565b5b6000614a6d8582860161480f565b9250506020614a7e85828601614a33565b9150509250929050565b60008060408385031215614a9f57614a9e6143cc565b5b6000614aad8582860161480f565b925050602083013567ffffffffffffffff811115614ace57614acd6143d1565b5b614ada858286016145a0565b9150509250929050565b614aed81614a10565b82525050565b6000602082019050614b086000830184614ae4565b92915050565b60008060408385031215614b2557614b246143cc565b5b6000614b338582860161480f565b9250506020614b4485828601614665565b9150509250929050565b6000614b59826147c6565b9050919050565b614b6981614b4e565b82525050565b6000602082019050614b846000830184614b60565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614bbf816147e6565b82525050565b6000614bd18383614bb6565b60208301905092915050565b6000602082019050919050565b6000614bf582614b8a565b614bff8185614b95565b9350614c0a83614ba6565b8060005b83811015614c3b578151614c228882614bc5565b9750614c2d83614bdd565b925050600181019050614c0e565b5085935050505092915050565b60006020820190508181036000830152614c628184614bea565b905092915050565b600060408284031215614c8057614c7f6143cc565b5b6000614c8e848285016144e7565b91505092915050565b6000604082019050614cac6000830185614ae4565b8181036020830152614cbe8184614990565b90509392505050565b604082016000820151614cdd60008501826148e5565b506020820151614cf0602085018261492d565b50505050565b6000604082019050614d0b6000830184614cc7565b92915050565b600081905092915050565b50565b6000614d2c600083614d11565b9150614d3782614d1c565b600082019050919050565b6000614d4d82614d1f565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000614d9e601083614d57565b9150614da982614d68565b602082019050919050565b60006020820190508181036000830152614dcd81614d91565b9050919050565b614ddd816147e6565b82525050565b6000604082019050614df86000830185614dd4565b614e056020830184614dd4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e758261438e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ea757614ea6614e3b565b5b600182019050919050565b6000614ebd8261438e565b9150614ec88361438e565b9250828202614ed68161438e565b91508282048414831517614eed57614eec614e3b565b5b5092915050565b6000604082019050614f096000830185614398565b614f166020830184614398565b9392505050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000614f53601983614d57565b9150614f5e82614f1d565b602082019050919050565b60006020820190508181036000830152614f8281614f46565b9050919050565b6000614f948261438e565b9150614f9f8361438e565b9250828203905081811115614fb757614fb6614e3b565b5b92915050565b6000614fc88261438e565b9150614fd38361438e565b9250828201905080821115614feb57614fea614e3b565b5b92915050565b60006060820190506150066000830186614dd4565b6150136020830185614398565b6150206040830184614398565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006150628261438e565b915061506d8361438e565b92508261507d5761507c615028565b5b828204905092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600060ff82169050919050565b60006150d56150d0836150a8565b6150b5565b9050919050565b60008160081c9050919050565b600060ff82169050919050565b6000615109615104836150dc565b6150e9565b9050919050565b604082016000808301549050615125816150c2565b61513260008601826148e5565b5061513c816150f6565b615149602086018261492d565b5050505050565b600061515c8383615110565b60408301905092915050565b6000600182019050919050565b600061518082615088565b61518a818561485c565b935061519583615093565b8060005b838110156151c557816151ac8882615150565b97506151b783615168565b925050600181019050615199565b5085935050505092915050565b600060208201905081810360008301526151ec8184615175565b905092915050565b6000819050919050565b615207816151f4565b82525050565b600067ffffffffffffffff82169050919050565b61522a8161520d565b82525050565b600061ffff82169050919050565b61524781615230565b82525050565b600063ffffffff82169050919050565b6152668161524d565b82525050565b6000819050919050565b6000819050919050565b600061529b6152966152918461526c565b615276565b61524d565b9050919050565b6152ab81615280565b82525050565b600060a0820190506152c660008301886151fe565b6152d36020830187615221565b6152e0604083018661523e565b6152ed606083018561525d565b6152fa60808301846152a2565b9695505050505050565b6000815190506153138161464e565b92915050565b60006020828403121561532f5761532e6143cc565b5b600061533d84828501615304565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061538082614617565b915061538b83614617565b9250828201905060ff8111156153a4576153a3614e3b565b5b92915050565b60006153b582614617565b915060ff82036153c8576153c7614e3b565b5b600182019050919050565b6040820160008083015490506153e8816150c2565b6153f560008601826148e5565b506153ff816150f6565b61540c602086018261492d565b5050505050565b600060608201905061542860008301856153d3565b818103604083015261543a8184615175565b90509392505050565b7f4465636b20697320656d70747900000000000000000000000000000000000000600082015250565b6000615479600d83614d57565b915061548482615443565b602082019050919050565b600060208201905081810360008301526154a88161546c565b9050919050565b60006040820190506154c46000830185614398565b6154d16020830184614624565b9392505050565b60006154e38261438e565b91506154ee8361438e565b9250826154fe576154fd615028565b5b828206905092915050565b600061551482614617565b91506000820361552757615526614e3b565b5b60018203905091905056fea264697066735822122023deeedd19b5245e7b552e7b05c3ac3faec5350b1898e99b2f9de032093a17cb64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c806396e0a8151161010d578063bf4059a1116100a0578063de550f4f1161006f578063de550f4f1461072e578063e3913d6c14610745578063f18e991b14610782578063f2fa7d63146107ad578063f7654176146107d85761023b565b8063bf4059a114610688578063c2897b10146106b1578063c2b1e3db146106c8578063cece2fa0146106f15761023b565b8063b02a97bf116100dc578063b02a97bf146105ce578063b5c9ab001461060b578063b71c47a214610648578063bb851db91461065f5761023b565b806396e0a81514610520578063991a396114610549578063a7e1f6a214610586578063ac33a56a146105905761023b565b806338a34a19116101905780637aad0b321161015f5780637aad0b321461043957806384dbffb0146104625780638a4d93c31461048d5780638b5b9ccc146104ca578063969a2fbd146104f55761023b565b806338a34a19146103b257806354e4437e146103db5780635d2c7fb5146104185780637517b4631461042f5761023b565b80632ae3594a116101cc5780632ae3594a146102f857806330cfeda91461030f57806335d17c611461034c57806336dce9ef146103895761023b565b8063139761021461024057806316b8880e1461027d5780631fe543e3146102a657806322ec89f0146102cf5761023b565b3661023b577f953e2e776da7b08f66a1eb7d5aba63c96be4e6d392519da47f532ec4f6096c2c3460405161023191906143a7565b60405180910390a1005b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906145ce565b6107e2565b6040516102749190614633565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f919061467a565b6107f4565b005b3480156102b257600080fd5b506102cd60048036038101906102c8919061476a565b610942565b005b3480156102db57600080fd5b506102f660048036038101906102f19190614824565b610a02565b005b34801561030457600080fd5b5061030d610a4c565b005b34801561031b57600080fd5b5061033660048036038101906103319190614824565b610c13565b60405161034391906143a7565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e9190614824565b610c5c565b60405161038091906149ee565b60405180910390f35b34801561039557600080fd5b506103b060048036038101906103ab9190614a48565b610d6f565b005b3480156103be57600080fd5b506103d960048036038101906103d49190614a88565b610dcd565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190614824565b610ed5565b60405161040f9190614af3565b60405180910390f35b34801561042457600080fd5b5061042d610f2e565b005b6104376110ae565b005b34801561044557600080fd5b50610460600480360381019061045b9190614b0e565b61128c565b005b34801561046e57600080fd5b506104776112db565b6040516104849190614b6f565b60405180910390f35b34801561049957600080fd5b506104b460048036038101906104af9190614824565b6112ff565b6040516104c191906149ee565b60405180910390f35b3480156104d657600080fd5b506104df611530565b6040516104ec9190614c48565b60405180910390f35b34801561050157600080fd5b5061050a6115be565b60405161051791906143a7565b60405180910390f35b34801561052c57600080fd5b5061054760048036038101906105429190614b0e565b61160a565b005b34801561055557600080fd5b50610570600480360381019061056b9190614c6a565b611652565b60405161057d9190614633565b60405180910390f35b61058e611664565b005b34801561059c57600080fd5b506105b760048036038101906105b291906145ce565b611818565b6040516105c5929190614c97565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906145ce565b61182e565b6040516106029190614633565b60405180910390f35b34801561061757600080fd5b50610632600480360381019061062d9190614824565b611840565b60405161063f9190614cf6565b60405180910390f35b34801561065457600080fd5b5061065d611899565b005b34801561066b57600080fd5b5061068660048036038101906106819190614824565b611add565b005b34801561069457600080fd5b506106af60048036038101906106aa9190614a88565b611b28565b005b3480156106bd57600080fd5b506106c6611c30565b005b3480156106d457600080fd5b506106ef60048036038101906106ea9190614824565b612248565b005b3480156106fd57600080fd5b5061071860048036038101906107139190614824565b61229b565b60405161072591906149ee565b60405180910390f35b34801561073a57600080fd5b506107436123ae565b005b34801561075157600080fd5b5061076c60048036038101906107679190614824565b61265a565b60405161077991906149ee565b60405180910390f35b34801561078e57600080fd5b5061079761276d565b6040516107a491906143a7565b60405180910390f35b3480156107b957600080fd5b506107c2612775565b6040516107cf91906143a7565b60405180910390f35b6107e0612832565b005b60006107ed82612c2e565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610879576040517f0cbb466000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108836115be565b905080821115610891578091505b60003373ffffffffffffffffffffffffffffffffffffffff16836040516108b790614d42565b60006040518083038185875af1925050503d80600081146108f4576040519150601f19603f3d011682016040523d82523d6000602084013e6108f9565b606091505b505090508061093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490614db4565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109f457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016109eb929190614de3565b60405180910390fd5b6109fe8282612c94565b5050565b610a49600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613075565b50565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610ad2576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610b28826002016132d0565b905081600101819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115610b7f57610b7e61487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115610baf57610bae61487d565b5b021790555050508273ffffffffffffffffffffffffffffffffffffffff167fa00526ac35293338c4995804bb6d15732b3e5ca08b009ef10680c36364a20a4682604051610bfc9190614cf6565b60405180910390a2610c0e8284613428565b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b82821015610d64578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115610d0457610d0361487d565b5b600c811115610d1657610d1561487d565b5b81526020016000820160019054906101000a900460ff166003811115610d3f57610d3e61487d565b5b6003811115610d5157610d5061487d565b5b8152505081526020019060010190610cc0565b505050509050919050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505050565b60005b8151811015610ed057600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828281518110610e2e57610e2d614e0c565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115610e8657610e8561487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115610eb657610eb561487d565b5b021790555050508080610ec890614e6a565b915050610dd0565b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff169050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615610fb5576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fc0600033613983565b60003373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161102590614d42565b60006040518083038185875af1925050503d8060008114611062576040519150601f19603f3d011682016040523d82523d6000602084013e611067565b606091505b50509050806110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a290614db4565b60405180910390fd5b50565b60006110b86115be565b90506002346110c79190614eb2565b81101561110d5780346040517fd8c7dbf2000000000000000000000000000000000000000000000000000000008152600401611104929190614ef4565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611194576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f5c963fd7fde519af29d56159e6e3e18db4e5d3e4716c39c87958cf9e4862ed583460405161128191906143a7565b60405180910390a250565b6112d781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201613b0e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b82821015611409578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156113a9576113a861487d565b5b600c8111156113bb576113ba61487d565b5b81526020016000820160019054906101000a900460ff1660038111156113e4576113e361487d565b5b60038111156113f6576113f561487d565b5b8152505081526020019060010190611365565b50505050905060006001905081518110611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144f90614f69565b60405180910390fd5b60008183516114679190614f89565b905060008167ffffffffffffffff811115611485576114846143ec565b5b6040519080825280602002602001820160405280156114be57816020015b6114ab6142f0565b8152602001906001900390816114a35790505b50905060005b82811015611523578481856114d99190614fbd565b815181106114ea576114e9614e0c565b5b602002602001015182828151811061150557611504614e0c565b5b6020026020010181905250808061151b90614e6a565b9150506114c4565b5080945050505050919050565b606060008054806020026020016040519081016040528092919081815260200182805480156115b457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161156a575b5050505050905090565b6000806115c961276d565b9050600060026115d7612775565b6115e19190614eb2565b9050818111156115f657600092505050611607565b80826116029190614f89565b925050505b90565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600061165d82613d6b565b9050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166116ea576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146117b05733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa00000000000000000000000000000000000000000000000000000000081526004016117a793929190614ff1565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117ff9190614fbd565b9250508190555061180e610a4c565b611816611c30565b565b6000606061182583614029565b91509150915091565b60006118398261413b565b9050919050565b6118486142f0565b611892600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016132d0565b9050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661191f576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119ae9190615057565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119fc9190614f89565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611a53919061432e565b600182016000611a63919061432e565b600282016000611a73919061432e565b6003820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff167f1c3d254fb838c7352a6e848b11d4a6e0e41f6fc9b62f9d10fe739e428b6cd04f82600001604051611ad291906151d2565b60405180910390a250565b611b25600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082613428565b50565b60005b8151811015611c2b57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101828281518110611b8957611b88614e0c565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115611be157611be061487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115611c1157611c1061487d565b5b021790555050508080611c2390614e6a565b915050611b2b565b505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611cb6576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060003390506000611dd483600101805480602002602001604051908101604052809291908181526020016000905b82821015611dcb578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115611d6b57611d6a61487d565b5b600c811115611d7d57611d7c61487d565b5b81526020016000820160019054906101000a900460ff166003811115611da657611da561487d565b5b6003811115611db857611db761487d565b5b8152505081526020019060010190611d27565b5050505061413b565b90506000611eac84600001805480602002602001604051908101604052809291908181526020016000905b82821015611ea3578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115611e4357611e4261487d565b5b600c811115611e5557611e5461487d565b5b81526020016000820160019054906101000a900460ff166003811115611e7e57611e7d61487d565b5b6003811115611e9057611e8f61487d565b5b8152505081526020019060010190611dff565b5050505061413b565b9050611eb784613075565b8060ff168260ff1603611fa0578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e85600001604051611f0d91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611f65919061432e565b600182016000611f75919061432e565b600282016000611f85919061432e565b6003820160006101000a81549060ff02191690555050612242565b8060ff168260ff1610156120da578273ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a285600001604051611ff791906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061204f919061432e565b60018201600061205f919061432e565b60028201600061206f919061432e565b6003820160006101000a81549060ff021916905550506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120d5600084613983565b612241565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e88560000160405161212391906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061217b919061432e565b60018201600061218b919061432e565b60028201600061219b919061432e565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121fd9190614eb2565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612297816002016141bc565b5050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156123a3578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156123435761234261487d565b5b600c8111156123555761235461487d565b5b81526020016000820160019054906101000a900460ff16600381111561237e5761237d61487d565b5b60038111156123905761238f61487d565b5b81525050815260200190600101906122ff565b505050509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612426576040517eca21b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16156124ad576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016125729594939291906152b1565b6020604051808303816000875af1158015612591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b59190615319565b9050336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ff25b42314a7b32046c40e6d73a9308e47dd11531745977093de43c966a450f988260405161264f91906143a7565b60405180910390a250565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805480602002602001604051908101604052809291908181526020016000905b82821015612762578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156127025761270161487d565b5b600c8111156127145761271361487d565b5b81526020016000820160019054906101000a900460ff16600381111561273d5761273c61487d565b5b600381111561274f5761274e61487d565b5b81525050815260200190600101906126be565b505050509050919050565b600047905090565b6000806000905060005b60008054905081101561282a57600160008083815481106127a3576127a2614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826128149190614fbd565b91506001816128239190614fbd565b905061277f565b508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166128b8576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461297e5733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa000000000000000000000000000000000000000000000000000000000815260040161297593929190614ff1565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015612a86578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115612a2657612a2561487d565b5b600c811115612a3857612a3761487d565b5b81526020016000820160019054906101000a900460ff166003811115612a6157612a6061487d565b5b6003811115612a7357612a7261487d565b5b81525050815260200190600101906129e2565b505050509050600060028251148015612b00575081600181518110612aae57612aad614e0c565b5b602002602001015160000151600c811115612acc57612acb61487d565b5b82600081518110612ae057612adf614e0c565b5b602002602001015160000151600c811115612afe57612afd61487d565b5b145b905080612b39576040517f32a7a66300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b889190614fbd565b9250508190555060003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600101805480612beb57612bea615346565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905550505050565b6000806000905060005b83518160ff161015612c8a57612c6a848260ff1681518110612c5d57612c5c614e0c565b5b6020026020010151613d6b565b82612c759190615375565b91508080612c82906153aa565b915050612c38565b5080915050919050565b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612d1b816002016141bc565b612d4383600081518110612d3257612d31614e0c565b5b602002602001015182600201613b0e565b80600001612d53826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612da357612da261487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612dd357612dd261487d565b5b0217905550505080600001612dea826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612e3a57612e3961487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612e6a57612e6961487d565b5b0217905550505080600101612e81826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612ed157612ed061487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612f0157612f0061487d565b5b0217905550505080600101612f18826002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612f6857612f6761487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612f9857612f9761487d565b5b0217905550505060018160030160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc3526b989b2c50fdd238cba2622a708296aa7d7deabacb893b6fc4c5b68acb1f8260000160018154811061300b5761300a614e0c565b5b9060005260206000200183600101604051613027929190615413565b60405180910390a26130398183613428565b6003600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505050565b600061314b82600001805480602002602001604051908101604052809291908181526020016000905b82821015613142578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156130e2576130e161487d565b5b600c8111156130f4576130f361487d565b5b81526020016000820160019054906101000a900460ff16600381111561311d5761311c61487d565b5b600381111561312f5761312e61487d565b5b815250508152602001906001019061309e565b5050505061413b565b90505b60118160ff1610156132cc578160000161316a836002016132d0565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c8111156131ba576131b961487d565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156131ea576131e961487d565b5b021790555050506132c582600001805480602002602001604051908101604052809291908181526020016000905b828210156132bc578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561325c5761325b61487d565b5b600c81111561326e5761326d61487d565b5b81526020016000820160019054906101000a900460ff1660038111156132975761329661487d565b5b60038111156132a9576132a861487d565b5b8152505081526020019060010190613218565b5050505061413b565b905061314e565b5050565b6132d86142f0565b600082805490501161331f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133169061548f565b60405180910390fd5b600082600184805490506133339190614f89565b8154811061334457613343614e0c565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561337e5761337d61487d565b5b600c8111156133905761338f61487d565b5b81526020016000820160019054906101000a900460ff1660038111156133b9576133b861487d565b5b60038111156133cb576133ca61487d565b5b815250509050828054806133e2576133e1615346565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905580915050919050565b60006134fe83600101805480602002602001604051908101604052809291908181526020016000905b828210156134f5578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156134955761349461487d565b5b600c8111156134a7576134a661487d565b5b81526020016000820160019054906101000a900460ff1660038111156134d0576134cf61487d565b5b60038111156134e2576134e161487d565b5b8152505081526020019060010190613451565b5050505061413b565b905060158160ff161115613638578173ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a28460000160405161355591906151d2565b60405180910390a2600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006135ad919061432e565b6001820160006135bd919061432e565b6002820160006135cd919061432e565b6003820160006101000a81549060ff021916905550506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613633600083613983565b61397e565b60158160ff160361397d57600061371984600001805480602002602001604051908101604052809291908181526020016000905b82821015613710578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156136b0576136af61487d565b5b600c8111156136c2576136c161487d565b5b81526020016000820160019054906101000a900460ff1660038111156136eb576136ea61487d565b5b60038111156136fd576136fc61487d565b5b815250508152602001906001019061366c565b5050505061413b565b905060158160ff1603613802578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e8560000160405161376f91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006137c7919061432e565b6001820160006137d7919061432e565b6002820160006137e7919061432e565b6003820160006101000a81549060ff0219169055505061397b565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e88560000160405161384b91906151d2565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006138a3919061432e565b6001820160006138b3919061432e565b6002820160006138c3919061432e565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139259190615057565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139739190614fbd565b925050819055505b505b5b505050565b60005b8280549050811015613b09578173ffffffffffffffffffffffffffffffffffffffff168382815481106139bc576139bb614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613af6578260018480549050613a149190614f89565b81548110613a2557613a24614e0c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110613a6357613a62614e0c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480613abc57613abb615346565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055613b09565b8080613b0190614e6a565b915050613986565b505050565b6000603390505b60008160ff161115613d66576000600182613b309190615375565b60ff168483604051602001613b469291906154af565b6040516020818303038152906040528051906020012060001c613b6991906154d8565b90506000838360ff1681548110613b8357613b82614e0c565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115613bbd57613bbc61487d565b5b600c811115613bcf57613bce61487d565b5b81526020016000820160019054906101000a900460ff166003811115613bf857613bf761487d565b5b6003811115613c0a57613c0961487d565b5b815250509050838260ff1681548110613c2657613c25614e0c565b5b90600052602060002001848460ff1681548110613c4657613c45614e0c565b5b906000526020600020016000820160009054906101000a900460ff168160000160006101000a81548160ff0219169083600c811115613c8857613c8761487d565b5b02179055506000820160019054906101000a900460ff168160000160016101000a81548160ff02191690836003811115613cc557613cc461487d565b5b021790555090505080848360ff1681548110613ce457613ce3614e0c565b5b9060005260206000200160008201518160000160006101000a81548160ff0219169083600c811115613d1957613d1861487d565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115613d4957613d4861487d565b5b021790555090505050508080613d5e90615509565b915050613b15565b505050565b600080826000015190506000600c811115613d8957613d8861487d565b5b81600c811115613d9c57613d9b61487d565b5b03613dab576001915050614024565b6001600c811115613dbf57613dbe61487d565b5b81600c811115613dd257613dd161487d565b5b03613de1576002915050614024565b6002600c811115613df557613df461487d565b5b81600c811115613e0857613e0761487d565b5b03613e17576003915050614024565b6003600c811115613e2b57613e2a61487d565b5b81600c811115613e3e57613e3d61487d565b5b03613e4d576004915050614024565b6004600c811115613e6157613e6061487d565b5b81600c811115613e7457613e7361487d565b5b03613e83576005915050614024565b6005600c811115613e9757613e9661487d565b5b81600c811115613eaa57613ea961487d565b5b03613eb9576006915050614024565b6006600c811115613ecd57613ecc61487d565b5b81600c811115613ee057613edf61487d565b5b03613eef576007915050614024565b6007600c811115613f0357613f0261487d565b5b81600c811115613f1657613f1561487d565b5b03613f25576008915050614024565b6008600c811115613f3957613f3861487d565b5b81600c811115613f4c57613f4b61487d565b5b03613f5b576009915050614024565b6009600c811115613f6f57613f6e61487d565b5b81600c811115613f8257613f8161487d565b5b1480613fb25750600a600c811115613f9d57613f9c61487d565b5b81600c811115613fb057613faf61487d565b5b145b80613fe15750600b600c811115613fcc57613fcb61487d565b5b81600c811115613fdf57613fde61487d565b5b145b8061400f5750600c80811115613ffa57613ff961487d565b5b81600c81111561400d5761400c61487d565b5b145b1561401e57600a915050614024565b60009150505b919050565b6000606060005b83518160ff16101561412d576000600c8111156140505761404f61487d565b5b848260ff168151811061406657614065614e0c565b5b602002602001015160000151600c8111156140845761408361487d565b5b0361411a5760008190505b6001855161409d9190614f89565b8160ff16101561410557846001826140b59190615375565b60ff16815181106140c9576140c8614e0c565b5b6020026020010151858260ff16815181106140e7576140e6614e0c565b5b602002602001018190525080806140fd906153aa565b91505061408f565b50600184510384526001849250925050614136565b8080614125906153aa565b915050614030565b50600083915091505b915091565b60008060008061414a85614029565b9150915081156141a557600061415f82612c2e565b600b61416b9190615375565b905060158160ff16111561419b57600061418483612c2e565b60016141909190615375565b90508094505061419f565b8093505b506141b1565b6141ae85612c2e565b92505b829350505050919050565b60005b60048160ff1610156142ec5760005b600d8160ff1610156142d8578260405180604001604052808360ff16600c8111156141fc576141fb61487d565b5b600c81111561420e5761420d61487d565b5b81526020018460ff1660038111156142295761422861487d565b5b600381111561423b5761423a61487d565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561428e5761428d61487d565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156142be576142bd61487d565b5b0217905550505080806142d0906153aa565b9150506141ce565b5080806142e4906153aa565b9150506141bf565b5050565b60405180604001604052806000600c81111561430f5761430e61487d565b5b8152602001600060038111156143285761432761487d565b5b81525090565b508054600082559060005260206000209081019061434c919061434f565b50565b5b8082111561438a57600080820160006101000a81549060ff02191690556000820160016101000a81549060ff021916905550600101614350565b5090565b6000819050919050565b6143a18161438e565b82525050565b60006020820190506143bc6000830184614398565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614424826143db565b810181811067ffffffffffffffff82111715614443576144426143ec565b5b80604052505050565b60006144566143c2565b9050614462828261441b565b919050565b600067ffffffffffffffff821115614482576144816143ec565b5b602082029050602081019050919050565b600080fd5b600080fd5b600d81106144aa57600080fd5b50565b6000813590506144bc8161449d565b92915050565b600481106144cf57600080fd5b50565b6000813590506144e1816144c2565b92915050565b6000604082840312156144fd576144fc614498565b5b614507604061444c565b90506000614517848285016144ad565b600083015250602061452b848285016144d2565b60208301525092915050565b600061454a61454584614467565b61444c565b9050808382526020820190506040840283018581111561456d5761456c614493565b5b835b81811015614596578061458288826144e7565b84526020840193505060408101905061456f565b5050509392505050565b600082601f8301126145b5576145b46143d6565b5b81356145c5848260208601614537565b91505092915050565b6000602082840312156145e4576145e36143cc565b5b600082013567ffffffffffffffff811115614602576146016143d1565b5b61460e848285016145a0565b91505092915050565b600060ff82169050919050565b61462d81614617565b82525050565b60006020820190506146486000830184614624565b92915050565b6146578161438e565b811461466257600080fd5b50565b6000813590506146748161464e565b92915050565b6000602082840312156146905761468f6143cc565b5b600061469e84828501614665565b91505092915050565b600067ffffffffffffffff8211156146c2576146c16143ec565b5b602082029050602081019050919050565b60006146e66146e1846146a7565b61444c565b9050808382526020820190506020840283018581111561470957614708614493565b5b835b81811015614732578061471e8882614665565b84526020840193505060208101905061470b565b5050509392505050565b600082601f830112614751576147506143d6565b5b81356147618482602086016146d3565b91505092915050565b60008060408385031215614781576147806143cc565b5b600061478f85828601614665565b925050602083013567ffffffffffffffff8111156147b0576147af6143d1565b5b6147bc8582860161473c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006147f1826147c6565b9050919050565b614801816147e6565b811461480c57600080fd5b50565b60008135905061481e816147f8565b92915050565b60006020828403121561483a576148396143cc565b5b60006148488482850161480f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600d81106148bd576148bc61487d565b5b50565b60008190506148ce826148ac565b919050565b60006148de826148c0565b9050919050565b6148ee816148d3565b82525050565b600481106149055761490461487d565b5b50565b6000819050614916826148f4565b919050565b600061492682614908565b9050919050565b6149368161491b565b82525050565b60408201600082015161495260008501826148e5565b506020820151614965602085018261492d565b50505050565b6000614977838361493c565b60408301905092915050565b6000602082019050919050565b600061499b82614851565b6149a5818561485c565b93506149b08361486d565b8060005b838110156149e15781516149c8888261496b565b97506149d383614983565b9250506001810190506149b4565b5085935050505092915050565b60006020820190508181036000830152614a088184614990565b905092915050565b60008115159050919050565b614a2581614a10565b8114614a3057600080fd5b50565b600081359050614a4281614a1c565b92915050565b60008060408385031215614a5f57614a5e6143cc565b5b6000614a6d8582860161480f565b9250506020614a7e85828601614a33565b9150509250929050565b60008060408385031215614a9f57614a9e6143cc565b5b6000614aad8582860161480f565b925050602083013567ffffffffffffffff811115614ace57614acd6143d1565b5b614ada858286016145a0565b9150509250929050565b614aed81614a10565b82525050565b6000602082019050614b086000830184614ae4565b92915050565b60008060408385031215614b2557614b246143cc565b5b6000614b338582860161480f565b9250506020614b4485828601614665565b9150509250929050565b6000614b59826147c6565b9050919050565b614b6981614b4e565b82525050565b6000602082019050614b846000830184614b60565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614bbf816147e6565b82525050565b6000614bd18383614bb6565b60208301905092915050565b6000602082019050919050565b6000614bf582614b8a565b614bff8185614b95565b9350614c0a83614ba6565b8060005b83811015614c3b578151614c228882614bc5565b9750614c2d83614bdd565b925050600181019050614c0e565b5085935050505092915050565b60006020820190508181036000830152614c628184614bea565b905092915050565b600060408284031215614c8057614c7f6143cc565b5b6000614c8e848285016144e7565b91505092915050565b6000604082019050614cac6000830185614ae4565b8181036020830152614cbe8184614990565b90509392505050565b604082016000820151614cdd60008501826148e5565b506020820151614cf0602085018261492d565b50505050565b6000604082019050614d0b6000830184614cc7565b92915050565b600081905092915050565b50565b6000614d2c600083614d11565b9150614d3782614d1c565b600082019050919050565b6000614d4d82614d1f565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000614d9e601083614d57565b9150614da982614d68565b602082019050919050565b60006020820190508181036000830152614dcd81614d91565b9050919050565b614ddd816147e6565b82525050565b6000604082019050614df86000830185614dd4565b614e056020830184614dd4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e758261438e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ea757614ea6614e3b565b5b600182019050919050565b6000614ebd8261438e565b9150614ec88361438e565b9250828202614ed68161438e565b91508282048414831517614eed57614eec614e3b565b5b5092915050565b6000604082019050614f096000830185614398565b614f166020830184614398565b9392505050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000614f53601983614d57565b9150614f5e82614f1d565b602082019050919050565b60006020820190508181036000830152614f8281614f46565b9050919050565b6000614f948261438e565b9150614f9f8361438e565b9250828203905081811115614fb757614fb6614e3b565b5b92915050565b6000614fc88261438e565b9150614fd38361438e565b9250828201905080821115614feb57614fea614e3b565b5b92915050565b60006060820190506150066000830186614dd4565b6150136020830185614398565b6150206040830184614398565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006150628261438e565b915061506d8361438e565b92508261507d5761507c615028565b5b828204905092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600060ff82169050919050565b60006150d56150d0836150a8565b6150b5565b9050919050565b60008160081c9050919050565b600060ff82169050919050565b6000615109615104836150dc565b6150e9565b9050919050565b604082016000808301549050615125816150c2565b61513260008601826148e5565b5061513c816150f6565b615149602086018261492d565b5050505050565b600061515c8383615110565b60408301905092915050565b6000600182019050919050565b600061518082615088565b61518a818561485c565b935061519583615093565b8060005b838110156151c557816151ac8882615150565b97506151b783615168565b925050600181019050615199565b5085935050505092915050565b600060208201905081810360008301526151ec8184615175565b905092915050565b6000819050919050565b615207816151f4565b82525050565b600067ffffffffffffffff82169050919050565b61522a8161520d565b82525050565b600061ffff82169050919050565b61524781615230565b82525050565b600063ffffffff82169050919050565b6152668161524d565b82525050565b6000819050919050565b6000819050919050565b600061529b6152966152918461526c565b615276565b61524d565b9050919050565b6152ab81615280565b82525050565b600060a0820190506152c660008301886151fe565b6152d36020830187615221565b6152e0604083018661523e565b6152ed606083018561525d565b6152fa60808301846152a2565b9695505050505050565b6000815190506153138161464e565b92915050565b60006020828403121561532f5761532e6143cc565b5b600061533d84828501615304565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061538082614617565b915061538b83614617565b9250828201905060ff8111156153a4576153a3614e3b565b5b92915050565b60006153b582614617565b915060ff82036153c8576153c7614e3b565b5b600182019050919050565b6040820160008083015490506153e8816150c2565b6153f560008601826148e5565b506153ff816150f6565b61540c602086018261492d565b5050505050565b600060608201905061542860008301856153d3565b818103604083015261543a8184615175565b90509392505050565b7f4465636b20697320656d70747900000000000000000000000000000000000000600082015250565b6000615479600d83614d57565b915061548482615443565b602082019050919050565b600060208201905081810360008301526154a88161546c565b9050919050565b60006040820190506154c46000830185614398565b6154d16020830184614624565b9392505050565b60006154e38261438e565b91506154ee8361438e565b9250826154fe576154fd615028565b5b828206905092915050565b600061551482614617565b91506000820361552757615526614e3b565b5b60018203905091905056fea264697066735822122023deeedd19b5245e7b552e7b05c3ac3faec5350b1898e99b2f9de032093a17cb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1156,
        "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1160,
        "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1165,
        "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
        "label": "s_states",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(GameState)1212_storage)"
      },
      {
        "astId": 1169,
        "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
        "label": "s_requestIdToPlayer",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Card)1197_storage)dyn_storage": {
        "base": "t_struct(Card)1197_storage",
        "encoding": "dynamic_array",
        "label": "struct Blackjack.Card[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(CardSuit)1190": {
        "encoding": "inplace",
        "label": "enum Blackjack.CardSuit",
        "numberOfBytes": "1"
      },
      "t_enum(CardValue)1185": {
        "encoding": "inplace",
        "label": "enum Blackjack.CardValue",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(GameState)1212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Blackjack.GameState)",
        "numberOfBytes": "32",
        "value": "t_struct(GameState)1212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Card)1197_storage": {
        "encoding": "inplace",
        "label": "struct Blackjack.Card",
        "members": [
          {
            "astId": 1193,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CardValue)1185"
          },
          {
            "astId": 1196,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "suit",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(CardSuit)1190"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameState)1212_storage": {
        "encoding": "inplace",
        "label": "struct Blackjack.GameState",
        "members": [
          {
            "astId": 1201,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "dealerHand",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1205,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "playerHand",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1209,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "deck",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1211,
            "contract": "contracts/test/BlackjackTest.sol:BlackjackTest",
            "label": "isStarted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}