{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dealerBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerBalance",
          "type": "uint256"
        }
      ],
      "name": "Blackjack__DealerHasNotEnoughCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameMustBeStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameMustNotBeStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__GameNotFunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Blackjack__PlayerHandMustBeAPair",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Blackjack__WrongAmountToDoubleWager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DealerFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GameFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card",
          "name": "drawnCard",
          "type": "tuple"
        }
      ],
      "name": "GameHit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameLost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card",
          "name": "visibleDealerCard",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "playerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameSurrended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameTie",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Blackjack.Card[]",
          "name": "dealerHand",
          "type": "tuple[]"
        }
      ],
      "name": "GameWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomWord",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "doubleDown",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundAGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getGameStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockedProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getVisibleDealerHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Blackjack.CardValue",
              "name": "value",
              "type": "uint8"
            },
            {
              "internalType": "enum Blackjack.CardSuit",
              "name": "suit",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blackjack.Card[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_dealer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "split",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surrender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewBalanceOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMoneyToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoneyToPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad756912b38eefc70eeb7dd07d7f2f5ffc7f7c349d918d7f86b65774a8702460",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4015652",
    "logsBloom": "0x
    "blockHash": "0xf7a44c9ef0a29bb6b9b9a9f2309a0708f386221f6dccda1dbb5629b427f0916f",
    "transactionHash": "0xad756912b38eefc70eeb7dd07d7f2f5ffc7f7c349d918d7f86b65774a8702460",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "4015652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "5000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e956e809c7af4013d903eed8d4a21878",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealerBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerBalance\",\"type\":\"uint256\"}],\"name\":\"Blackjack__DealerHasNotEnoughCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameMustBeStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameMustNotBeStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__GameNotFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Blackjack__PlayerHandMustBeAPair\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Blackjack__WrongAmountToDoubleWager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DealerFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card\",\"name\":\"drawnCard\",\"type\":\"tuple\"}],\"name\":\"GameHit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card\",\"name\":\"visibleDealerCard\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"playerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameSurrended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameTie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"dealerHand\",\"type\":\"tuple[]\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomWord\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"doubleDown\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getGameStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerHand\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getVisibleDealerHand\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Blackjack.CardValue\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"enum Blackjack.CardSuit\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct Blackjack.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_dealer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surrender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBalanceOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMoneyToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoneyToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Blackjack.sol\":\"Blackjack\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Blackjack.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\n// ---------- Custom Errors ----------\\nerror Blackjack__DealerHasNotEnoughCollateral(uint256 dealerBalance, uint256 playerBalance);\\nerror Blackjack__GameNotFunded();\\nerror Blackjack__GameMustNotBeStarted();\\nerror Blackjack__GameMustBeStarted();\\nerror Blackjack__WrongAmountToDoubleWager(address player, uint256 amountNeeded, uint256 amountReceived);\\nerror Blackjack__PlayerHandMustBeAPair();\\nerror Blackjack__OnlyOwner();\\n\\ncontract Blackjack is VRFConsumerBaseV2 {\\n    // ---------- Chainlink VRF variables ----------\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    // ---------- Players' states and proceeds ----------\\n    address[] private s_players; // addresses of the players having more than 0 in their proceeds\\n    mapping(address => uint256) internal s_proceeds;\\n    mapping(address => GameState) internal s_states;\\n    mapping(uint256 => address) private s_requestIdToPlayer;\\n\\n    // ---------- Dealer's address ----------\\n    address payable public immutable i_dealer;\\n\\n    // ---------- Card values and suits ----------\\n    enum CardValue {\\n        Ace,\\n        Two,\\n        Three,\\n        Four,\\n        Five,\\n        Six,\\n        Seven,\\n        Eight,\\n        Nine,\\n        Ten,\\n        Jack,\\n        Queen,\\n        King\\n    }\\n    enum CardSuit {\\n        club,\\n        diamond,\\n        heart,\\n        spade\\n    }\\n    struct Card {\\n        CardValue value;\\n        CardSuit suit;\\n    }\\n\\n    // ---------- Game state for each player ----------\\n    struct GameState {\\n        Card[] dealerHand; //the first card is the hidden Card of the dealer\\n        Card[] playerHand;\\n        Card[] deck; //the deck is beeing dealt from the last card to the first one.\\n        bool isStarted;\\n    }\\n\\n    // ---------- Events ----------\\n    event GameFunded(address indexed player, uint256 amount);\\n    event DealerFunded(uint256 amount);\\n    event GameStarted(address indexed player, Card visibleDealerCard, Card[] playerHand);\\n    event GameLost(address indexed player, Card[] dealerHand);\\n    event GameTie(address indexed player, Card[] dealerHand);\\n    event GameWon(address indexed player, Card[] dealerHand);\\n    event GameSurrended(address indexed player, Card[] dealerHand);\\n    event GameHit(address indexed player, Card drawnCard);\\n    event RequestedRandomWord(address indexed player, uint256 requestId);\\n\\n    // ---------- Constructor ----------\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_dealer = payable(msg.sender);\\n    }\\n\\n    // ---------- Modifiers ----------\\n    modifier NotEnoughCollateral() {\\n        uint256 availableCollateral = getAvailableProceeds();\\n        if (availableCollateral < msg.value * 2) {\\n            revert Blackjack__DealerHasNotEnoughCollateral(availableCollateral, msg.value);\\n        }\\n        _;\\n    }\\n    modifier GameNotFunded() {\\n        if (s_proceeds[msg.sender] <= 0) {\\n            revert Blackjack__GameNotFunded();\\n        }\\n        _;\\n    }\\n    modifier GameMustNotBeStarted() {\\n        if (s_states[msg.sender].isStarted) {\\n            revert Blackjack__GameMustNotBeStarted();\\n        }\\n        _;\\n    }\\n    modifier GameMustBeStarted() {\\n        if (!s_states[msg.sender].isStarted) {\\n            revert Blackjack__GameMustBeStarted();\\n        }\\n        _;\\n    }\\n    modifier WrongAmountToDoubleWager() {\\n        if (s_proceeds[payable(msg.sender)] != msg.value) {\\n            revert Blackjack__WrongAmountToDoubleWager(msg.sender, s_proceeds[payable(msg.sender)], msg.value);\\n        }\\n        _;\\n    }\\n    modifier PlayerHandMustBeAPair() {\\n        Card[] memory playerHand = s_states[msg.sender].playerHand;\\n        bool playerHandIsAPair = playerHand.length == 2 && playerHand[0].value == playerHand[1].value;\\n        if (!playerHandIsAPair) {\\n            revert Blackjack__PlayerHandMustBeAPair();\\n        }\\n        _;\\n    }\\n    modifier OnlyOwner() {\\n        if (msg.sender != i_dealer) {\\n            revert Blackjack__OnlyOwner();\\n        }\\n\\n        _;\\n    }\\n\\n    // ---------- 1. Game Mechanics ----------\\n    function getCardPoints(Card memory card) internal pure returns (uint8) {\\n        CardValue cardValue = card.value; // Access the value from the Card struct\\n        if (cardValue == CardValue.Ace) {\\n            return 1; // Ace can be 1 or 11, but we'll return 1 as the default\\n        } else if (cardValue == CardValue.Two) {\\n            return 2;\\n        } else if (cardValue == CardValue.Three) {\\n            return 3;\\n        } else if (cardValue == CardValue.Four) {\\n            return 4;\\n        } else if (cardValue == CardValue.Five) {\\n            return 5;\\n        } else if (cardValue == CardValue.Six) {\\n            return 6;\\n        } else if (cardValue == CardValue.Seven) {\\n            return 7;\\n        } else if (cardValue == CardValue.Eight) {\\n            return 8;\\n        } else if (cardValue == CardValue.Nine) {\\n            return 9;\\n        } else if (\\n            cardValue == CardValue.Ten ||\\n            cardValue == CardValue.Jack ||\\n            cardValue == CardValue.Queen ||\\n            cardValue == CardValue.King\\n        ) {\\n            return 10;\\n        }\\n        return 0;\\n    }\\n    function initDeck(Card[] storage deck) internal {\\n        for (uint8 s = 0; s < 4; s++) {\\n            for (uint8 v = 0; v < 13; v++) {\\n                deck.push(Card(CardValue(v), CardSuit(s)));\\n            }\\n        }\\n    }\\n    function shuffleDeck(uint256 randomWord, Card[] storage deck) internal {\\n        for (uint8 i = 51; i > 0; i--) {\\n            uint8 j = uint8(uint256(keccak256(abi.encode(randomWord, i))) % (i + 1));\\n            Card memory temp = deck[i];\\n            deck[i] = deck[j];\\n            deck[j] = temp;\\n        }\\n    }\\n    // Draw a card from the deck (removes the last element and returns it)\\n    function drawACard(Card[] storage deck) internal returns (Card memory) {\\n        require(deck.length > 0, \\\"Deck is empty\\\");\\n        Card memory drawnCard = deck[deck.length - 1];\\n        deck.pop();\\n        return drawnCard;\\n    }\\n    function finishGameIfScoreAbove21(GameState storage gameState, address player) internal {\\n        uint8 score = computeHighestValidScore(gameState.playerHand);\\n        if (score > 21) {\\n            emit GameLost(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = 0;\\n            removeElement(s_players, player);\\n        } else if (score == 21) {\\n            uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\\n            if (dealerScore == 21) {\\n                emit GameTie(player, gameState.dealerHand);\\n                delete s_states[player];\\n            } else {\\n                emit GameWon(player, gameState.dealerHand);\\n                delete s_states[player];\\n                s_proceeds[player] += s_proceeds[player] / 2;\\n            }\\n        }\\n    }\\n    function removeElement(address[] storage array, address value) internal {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (array[i] == value) {\\n                array[i] = array[array.length - 1]; // Replace with the last element\\n                array.pop(); // Remove the last element\\n                break;\\n            }\\n        }\\n    }\\n    function removeFirstAce(Card[] memory cards) internal pure returns (bool, Card[] memory) {\\n        for (uint8 i = 0; i < cards.length; i++) {\\n            if (cards[i].value == CardValue.Ace) {\\n                // Remove the Ace by shifting elements to the left\\n                for (uint8 j = i; j < cards.length - 1; j++) {\\n                    cards[j] = cards[j + 1];\\n                }\\n                // Reduce the array length by 1\\n                assembly {\\n                    mstore(cards, sub(mload(cards), 1))\\n                }\\n                return (true, cards);\\n            }\\n        }\\n        return (false, cards); // No Ace found, return unchanged array\\n    }\\n    function computeScore(Card[] memory cards) internal pure returns (uint8) {\\n        uint8 score = 0;\\n        for (uint8 i = 0; i < cards.length; i++) {\\n            score = score + getCardPoints(cards[i]);\\n        }\\n        return score;\\n    }\\n    function computeHighestValidScore(Card[] memory cards) internal pure returns (uint8) {\\n        uint8 score;\\n        (bool hasAce, Card[] memory cardsWhithoutFirstAce) = removeFirstAce(cards);\\n        if (hasAce) {\\n            uint8 highScore = 11 + computeScore(cardsWhithoutFirstAce);\\n            if (highScore > 21) {\\n                uint8 lowScore = 1 + computeScore(cardsWhithoutFirstAce);\\n                score = lowScore;\\n            } else {\\n                score = highScore;\\n            }\\n        } else {\\n            score = computeScore(cards);\\n        }\\n        return score;\\n    }\\n    function dealerPlays(GameState storage gameState) internal {\\n        uint8 score = computeHighestValidScore(gameState.dealerHand);\\n        while (score < 17) {\\n            gameState.dealerHand.push(drawACard(gameState.deck));\\n            score = computeHighestValidScore(gameState.dealerHand);\\n        }\\n    }\\n\\n    // ---------- 2. Player Actions ----------\\n    function hit() public GameMustBeStarted {\\n        address player = msg.sender;\\n        GameState storage gameState = s_states[player];\\n        Card memory card = drawACard(gameState.deck);\\n        gameState.playerHand.push(card);\\n        emit GameHit(player, card);\\n        finishGameIfScoreAbove21(gameState, player);\\n    }\\n    function stand() public GameMustBeStarted {\\n        GameState storage gameState = s_states[msg.sender];\\n        address player = msg.sender;\\n        uint8 playerScore = computeHighestValidScore(gameState.playerHand);\\n        uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\\n        dealerPlays(gameState);\\n        if (playerScore == dealerScore) {\\n            emit GameTie(player, gameState.dealerHand);\\n            delete s_states[player];\\n        } else if (playerScore < dealerScore) {\\n            emit GameLost(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = 0;\\n            removeElement(s_players, player);\\n        } else {\\n            emit GameWon(player, gameState.dealerHand);\\n            delete s_states[player];\\n            s_proceeds[player] = s_proceeds[player] * 2;\\n        }\\n    }\\n    function doubleDown() public payable GameMustBeStarted WrongAmountToDoubleWager {\\n        s_proceeds[msg.sender] += msg.value;\\n        hit();\\n        stand();\\n    }\\n    function split() public payable GameMustBeStarted WrongAmountToDoubleWager PlayerHandMustBeAPair {\\n        s_proceeds[msg.sender] += msg.value;\\n        address player = msg.sender;\\n        GameState storage gameState = s_states[player];\\n        gameState.playerHand.pop();\\n    }\\n    function surrender() public GameMustBeStarted {\\n        GameState storage gameState = s_states[msg.sender];\\n        s_proceeds[msg.sender] -= s_proceeds[msg.sender] / 2;\\n        delete s_states[msg.sender];\\n        emit GameSurrended(msg.sender, gameState.dealerHand);\\n    }\\n\\n    // ---------- 3. Chainlink VRF and Game Start ----------\\n    function startAGame() public GameNotFunded GameMustNotBeStarted {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            1\\n        );\\n        s_requestIdToPlayer[requestId] = msg.sender;\\n        emit RequestedRandomWord(msg.sender, requestId);\\n    }\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        address player = s_requestIdToPlayer[requestId];\\n        GameState storage gameState = s_states[player];\\n        initDeck(gameState.deck);\\n        shuffleDeck(randomWords[0], gameState.deck);\\n\\n        gameState.dealerHand.push(drawACard(gameState.deck));\\n        gameState.dealerHand.push(drawACard(gameState.deck));\\n        gameState.playerHand.push(drawACard(gameState.deck));\\n        gameState.playerHand.push(drawACard(gameState.deck));\\n        gameState.isStarted = true;\\n        emit GameStarted(player, gameState.dealerHand[1], gameState.playerHand);\\n        finishGameIfScoreAbove21(gameState, player);\\n        delete s_requestIdToPlayer[requestId];\\n    }\\n\\n    // ---------- 4. Dealer Fund and Proceeds Management ----------\\n    receive() external payable {\\n        emit DealerFunded(msg.value);\\n    }\\n    function getLockedProceeds() public view returns (uint256) {\\n        uint256 lockedProceeds = 0;\\n        for (uint256 i = 0; i < s_players.length; i += 1) {\\n            lockedProceeds += s_proceeds[s_players[i]];\\n        }\\n        return lockedProceeds;\\n    }\\n    function getAvailableProceeds() public view returns (uint256) {\\n        uint256 balance = viewBalanceOfOwner();\\n        uint256 lockedProceeds = getLockedProceeds() * 2;\\n        if (lockedProceeds > balance) {\\n            return 0;\\n        }\\n        return balance - lockedProceeds;\\n    }\\n    function withdrawMoneyToOwner(uint256 amount) external OnlyOwner {\\n        uint256 maximumAmount = getAvailableProceeds();\\n        if (amount > maximumAmount) {\\n            amount = maximumAmount;\\n        }\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function fundAGame() external payable NotEnoughCollateral GameMustNotBeStarted {\\n        s_players.push(msg.sender);\\n        s_proceeds[payable(msg.sender)] = msg.value;\\n        emit GameFunded(msg.sender, msg.value);\\n    }\\n\\n    function viewBalanceOfOwner() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    function getProceeds(address player) public view returns (uint256) {\\n        return s_proceeds[player];\\n    }\\n    function withdrawMoneyToPlayer() public GameMustNotBeStarted {\\n        removeElement(s_players, msg.sender);\\n        (bool success, ) = payable(msg.sender).call{value: s_proceeds[msg.sender]}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    // ---------- 5. View game state functions ----------\\n    function getPlayerHand(address player) public view returns (Card[] memory) {\\n        return s_states[player].playerHand;\\n    }\\n    function getVisibleDealerHand(address player) public view returns (Card[] memory) {\\n        Card[] memory fullHand = s_states[player].dealerHand;\\n        uint256 startIndex = 1;\\n        require(startIndex < fullHand.length, \\\"Start index out of bounds\\\");\\n        uint256 newLength = fullHand.length - startIndex;\\n        Card[] memory visibleHand = new Card[](newLength);\\n        for (uint256 i = 0; i < newLength; i++) {\\n            visibleHand[i] = fullHand[startIndex + i];\\n        }\\n        return visibleHand;\\n    }\\n    function getGameStatus(address player) public view returns (bool) {\\n        return s_states[player].isStarted;\\n    }\\n    function getPlayers() public view returns (address[] memory) {\\n        return s_players;\\n    }\\n}\\n\",\"keccak256\":\"0x9edb13f03902ac13d528a8d8433dee2617c1d1aad8e651c4b19d2a610e2e40ec\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c80638b5b9ccc116100a0578063cece2fa011610064578063cece2fa014610355578063de550f4f14610392578063f18e991b146103a9578063f2fa7d63146103d4578063f7654176146103ff57610156565b80638b5b9ccc146102c7578063969a2fbd146102f2578063a7e1f6a21461031d578063b71c47a214610327578063c2897b101461033e57610156565b806354e4437e116100e757806354e4437e146102015780635d2c7fb51461023e5780637517b4631461025557806384dbffb01461025f5780638a4d93c31461028a57610156565b806316b8880e1461015b5780631fe543e3146101845780632ae3594a146101ad57806330cfeda9146101c457610156565b36610156577f953e2e776da7b08f66a1eb7d5aba63c96be4e6d392519da47f532ec4f6096c2c3460405161014c9190613916565b60405180910390a1005b600080fd5b34801561016757600080fd5b50610182600480360381019061017d9190613971565b610409565b005b34801561019057600080fd5b506101ab60048036038101906101a69190613af7565b610557565b005b3480156101b957600080fd5b506101c2610617565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190613bb1565b6107de565b6040516101f89190613916565b60405180910390f35b34801561020d57600080fd5b5061022860048036038101906102239190613bb1565b610827565b6040516102359190613bf9565b60405180910390f35b34801561024a57600080fd5b50610253610880565b005b61025d610a00565b005b34801561026b57600080fd5b50610274610bde565b6040516102819190613c35565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac9190613bb1565b610c02565b6040516102be9190613ded565b60405180910390f35b3480156102d357600080fd5b506102dc610e33565b6040516102e99190613ecd565b60405180910390f35b3480156102fe57600080fd5b50610307610ec1565b6040516103149190613916565b60405180910390f35b610325610f0d565b005b34801561033357600080fd5b5061033c6110c1565b005b34801561034a57600080fd5b50610353611305565b005b34801561036157600080fd5b5061037c60048036038101906103779190613bb1565b61191d565b6040516103899190613ded565b60405180910390f35b34801561039e57600080fd5b506103a7611a30565b005b3480156103b557600080fd5b506103be611cdc565b6040516103cb9190613916565b60405180910390f35b3480156103e057600080fd5b506103e9611ce4565b6040516103f69190613916565b60405180910390f35b610407611da1565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048e576040517f0cbb466000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610498610ec1565b9050808211156104a6578091505b60003373ffffffffffffffffffffffffffffffffffffffff16836040516104cc90613f20565b60006040518083038185875af1925050503d8060008114610509576040519150601f19603f3d011682016040523d82523d6000602084013e61050e565b606091505b5050905080610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990613f92565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610600929190613fc1565b60405180910390fd5b610613828261219d565b5050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661069d576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006106f38260020161257e565b905081600101819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561074a57610749613c7c565b5b021790555060208201518160000160016101000a81548160ff0219169083600381111561077a57610779613c7c565b5b021790555050508273ffffffffffffffffffffffffffffffffffffffff167fa00526ac35293338c4995804bb6d15732b3e5ca08b009ef10680c36364a20a46826040516107c79190614019565b60405180910390a26107d982846126d6565b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff169050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615610907576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610912600033612c31565b60003373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161097790613f20565b60006040518083038185875af1925050503d80600081146109b4576040519150601f19603f3d011682016040523d82523d6000602084013e6109b9565b606091505b50509050806109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490613f92565b60405180910390fd5b50565b6000610a0a610ec1565b9050600234610a199190614063565b811015610a5f5780346040517fd8c7dbf2000000000000000000000000000000000000000000000000000000008152600401610a569291906140a5565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615610ae6576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f5c963fd7fde519af29d56159e6e3e18db4e5d3e4716c39c87958cf9e4862ed5834604051610bd39190613916565b60405180910390a250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b82821015610d0c578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115610cac57610cab613c7c565b5b600c811115610cbe57610cbd613c7c565b5b81526020016000820160019054906101000a900460ff166003811115610ce757610ce6613c7c565b5b6003811115610cf957610cf8613c7c565b5b8152505081526020019060010190610c68565b50505050905060006001905081518110610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d529061411a565b60405180910390fd5b6000818351610d6a919061413a565b905060008167ffffffffffffffff811115610d8857610d876139b4565b5b604051908082528060200260200182016040528015610dc157816020015b610dae61385f565b815260200190600190039081610da65790505b50905060005b82811015610e2657848185610ddc919061416e565b81518110610ded57610dec6141a2565b5b6020026020010151828281518110610e0857610e076141a2565b5b60200260200101819052508080610e1e906141d1565b915050610dc7565b5080945050505050919050565b60606000805480602002602001604051908101604052809291908181526020018280548015610eb757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e6d575b5050505050905090565b600080610ecc611cdc565b905060006002610eda611ce4565b610ee49190614063565b905081811115610ef957600092505050610f0a565b8082610f05919061413a565b925050505b90565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610f93576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146110595733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa000000000000000000000000000000000000000000000000000000000815260040161105093929190614219565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110a8919061416e565b925050819055506110b7610617565b6110bf611305565b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611147576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d6919061427f565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611224919061413a565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061127b919061389d565b60018201600061128b919061389d565b60028201600061129b919061389d565b6003820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff167f1c3d254fb838c7352a6e848b11d4a6e0e41f6fc9b62f9d10fe739e428b6cd04f826000016040516112fa91906143fa565b60405180910390a250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661138b576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600033905060006114a983600101805480602002602001604051908101604052809291908181526020016000905b828210156114a0578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156114405761143f613c7c565b5b600c81111561145257611451613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561147b5761147a613c7c565b5b600381111561148d5761148c613c7c565b5b81525050815260200190600101906113fc565b50505050612dbc565b9050600061158184600001805480602002602001604051908101604052809291908181526020016000905b82821015611578578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561151857611517613c7c565b5b600c81111561152a57611529613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561155357611552613c7c565b5b600381111561156557611564613c7c565b5b81525050815260200190600101906114d4565b50505050612dbc565b905061158c84612e3d565b8060ff168260ff1603611675578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e856000016040516115e291906143fa565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061163a919061389d565b60018201600061164a919061389d565b60028201600061165a919061389d565b6003820160006101000a81549060ff02191690555050611917565b8060ff168260ff1610156117af578273ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a2856000016040516116cc91906143fa565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611724919061389d565b600182016000611734919061389d565b600282016000611744919061389d565b6003820160006101000a81549060ff021916905550506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117aa600084612c31565b611916565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e8856000016040516117f891906143fa565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611850919061389d565b600182016000611860919061389d565b600282016000611870919061389d565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118d29190614063565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015611a25578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c8111156119c5576119c4613c7c565b5b600c8111156119d7576119d6613c7c565b5b81526020016000820160019054906101000a900460ff166003811115611a00576119ff613c7c565b5b6003811115611a1257611a11613c7c565b5b8152505081526020019060010190611981565b505050509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611aa8576040517eca21b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611b2f576040517f686f06ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401611bf49594939291906144d9565b6020604051808303816000875af1158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c379190614541565b9050336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ff25b42314a7b32046c40e6d73a9308e47dd11531745977093de43c966a450f9882604051611cd19190613916565b60405180910390a250565b600047905090565b6000806000905060005b600080549050811015611d995760016000808381548110611d1257611d116141a2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611d83919061416e565b9150600181611d92919061416e565b9050611cee565b508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611e27576040517f1dac19aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611eed5733600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346040517f25806aa0000000000000000000000000000000000000000000000000000000008152600401611ee493929190614219565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015611ff5578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115611f9557611f94613c7c565b5b600c811115611fa757611fa6613c7c565b5b81526020016000820160019054906101000a900460ff166003811115611fd057611fcf613c7c565b5b6003811115611fe257611fe1613c7c565b5b8152505081526020019060010190611f51565b50505050905060006002825114801561206f57508160018151811061201d5761201c6141a2565b5b602002602001015160000151600c81111561203b5761203a613c7c565b5b8260008151811061204f5761204e6141a2565b5b602002602001015160000151600c81111561206d5761206c613c7c565b5b145b9050806120a8576040517f32a7a66300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120f7919061416e565b9250508190555060003390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010180548061215a5761215961456e565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905550505050565b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061222481600201613098565b61224c8360008151811061223b5761223a6141a2565b5b6020026020010151826002016131cc565b8060000161225c8260020161257e565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c8111156122ac576122ab613c7c565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156122dc576122db613c7c565b5b02179055505050806000016122f38260020161257e565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561234357612342613c7c565b5b021790555060208201518160000160016101000a81548160ff0219169083600381111561237357612372613c7c565b5b021790555050508060010161238a8260020161257e565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c8111156123da576123d9613c7c565b5b021790555060208201518160000160016101000a81548160ff0219169083600381111561240a57612409613c7c565b5b02179055505050806001016124218260020161257e565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561247157612470613c7c565b5b021790555060208201518160000160016101000a81548160ff021916908360038111156124a1576124a0613c7c565b5b0217905550505060018160030160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc3526b989b2c50fdd238cba2622a708296aa7d7deabacb893b6fc4c5b68acb1f82600001600181548110612514576125136141a2565b5b90600052602060002001836001016040516125309291906145dd565b60405180910390a261254281836126d6565b6003600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505050565b61258661385f565b60008280549050116125cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c490614659565b60405180910390fd5b600082600184805490506125e1919061413a565b815481106125f2576125f16141a2565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561262c5761262b613c7c565b5b600c81111561263e5761263d613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561266757612666613c7c565b5b600381111561267957612678613c7c565b5b815250509050828054806126905761268f61456e565b5b60019003818190600052602060002001600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690555050905580915050919050565b60006127ac83600101805480602002602001604051908101604052809291908181526020016000905b828210156127a3578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561274357612742613c7c565b5b600c81111561275557612754613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561277e5761277d613c7c565b5b60038111156127905761278f613c7c565b5b81525050815260200190600101906126ff565b50505050612dbc565b905060158160ff1611156128e6578173ffffffffffffffffffffffffffffffffffffffff167f776ac6a9e5092785349bb0c6383527a5fc30d048f21bfc13de668c3d7f9706a28460000160405161280391906143fa565b60405180910390a2600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061285b919061389d565b60018201600061286b919061389d565b60028201600061287b919061389d565b6003820160006101000a81549060ff021916905550506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128e1600083612c31565b612c2c565b60158160ff1603612c2b5760006129c784600001805480602002602001604051908101604052809291908181526020016000905b828210156129be578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561295e5761295d613c7c565b5b600c8111156129705761296f613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561299957612998613c7c565b5b60038111156129ab576129aa613c7c565b5b815250508152602001906001019061291a565b50505050612dbc565b905060158160ff1603612ab0578273ffffffffffffffffffffffffffffffffffffffff167f33eb25957e1f77668c79dc9950b9c3a880b9cb9af0873df29bceba48d2c9783e85600001604051612a1d91906143fa565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000612a75919061389d565b600182016000612a85919061389d565b600282016000612a95919061389d565b6003820160006101000a81549060ff02191690555050612c29565b8273ffffffffffffffffffffffffffffffffffffffff167f20bdd105d425e50722a95b042830f4d4fc49270507d85b7b2f1572ac583da2e885600001604051612af991906143fa565b60405180910390a2600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000612b51919061389d565b600182016000612b61919061389d565b600282016000612b71919061389d565b6003820160006101000a81549060ff021916905550506002600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bd3919061427f565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c21919061416e565b925050819055505b505b5b505050565b60005b8280549050811015612db7578173ffffffffffffffffffffffffffffffffffffffff16838281548110612c6a57612c696141a2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612da4578260018480549050612cc2919061413a565b81548110612cd357612cd26141a2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110612d1157612d106141a2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480612d6a57612d6961456e565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055612db7565b8080612daf906141d1565b915050612c34565b505050565b600080600080612dcb85613429565b915091508115612e26576000612de08261353b565b600b612dec9190614686565b905060158160ff161115612e1c576000612e058361353b565b6001612e119190614686565b905080945050612e20565b8093505b50612e32565b612e2f8561353b565b92505b829350505050919050565b6000612f1382600001805480602002602001604051908101604052809291908181526020016000905b82821015612f0a578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c811115612eaa57612ea9613c7c565b5b600c811115612ebc57612ebb613c7c565b5b81526020016000820160019054906101000a900460ff166003811115612ee557612ee4613c7c565b5b6003811115612ef757612ef6613c7c565b5b8152505081526020019060010190612e66565b50505050612dbc565b90505b60118160ff1610156130945781600001612f328360020161257e565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c811115612f8257612f81613c7c565b5b021790555060208201518160000160016101000a81548160ff02191690836003811115612fb257612fb1613c7c565b5b0217905550505061308d82600001805480602002602001604051908101604052809291908181526020016000905b82821015613084578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561302457613023613c7c565b5b600c81111561303657613035613c7c565b5b81526020016000820160019054906101000a900460ff16600381111561305f5761305e613c7c565b5b600381111561307157613070613c7c565b5b8152505081526020019060010190612fe0565b50505050612dbc565b9050612f16565b5050565b60005b60048160ff1610156131c85760005b600d8160ff1610156131b4578260405180604001604052808360ff16600c8111156130d8576130d7613c7c565b5b600c8111156130ea576130e9613c7c565b5b81526020018460ff16600381111561310557613104613c7c565b5b600381111561311757613116613c7c565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff0219169083600c81111561316a57613169613c7c565b5b021790555060208201518160000160016101000a81548160ff0219169083600381111561319a57613199613c7c565b5b0217905550505080806131ac906146bb565b9150506130aa565b5080806131c0906146bb565b91505061309b565b5050565b6000603390505b60008160ff1611156134245760006001826131ee9190614686565b60ff1684836040516020016132049291906146f3565b6040516020818303038152906040528051906020012060001c613227919061471c565b90506000838360ff1681548110613241576132406141a2565b5b906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600c81111561327b5761327a613c7c565b5b600c81111561328d5761328c613c7c565b5b81526020016000820160019054906101000a900460ff1660038111156132b6576132b5613c7c565b5b60038111156132c8576132c7613c7c565b5b815250509050838260ff16815481106132e4576132e36141a2565b5b90600052602060002001848460ff1681548110613304576133036141a2565b5b906000526020600020016000820160009054906101000a900460ff168160000160006101000a81548160ff0219169083600c81111561334657613345613c7c565b5b02179055506000820160019054906101000a900460ff168160000160016101000a81548160ff0219169083600381111561338357613382613c7c565b5b021790555090505080848360ff16815481106133a2576133a16141a2565b5b9060005260206000200160008201518160000160006101000a81548160ff0219169083600c8111156133d7576133d6613c7c565b5b021790555060208201518160000160016101000a81548160ff0219169083600381111561340757613406613c7c565b5b02179055509050505050808061341c9061474d565b9150506131d3565b505050565b6000606060005b83518160ff16101561352d576000600c8111156134505761344f613c7c565b5b848260ff1681518110613466576134656141a2565b5b602002602001015160000151600c81111561348457613483613c7c565b5b0361351a5760008190505b6001855161349d919061413a565b8160ff16101561350557846001826134b59190614686565b60ff16815181106134c9576134c86141a2565b5b6020026020010151858260ff16815181106134e7576134e66141a2565b5b602002602001018190525080806134fd906146bb565b91505061348f565b50600184510384526001849250925050613536565b8080613525906146bb565b915050613430565b50600083915091505b915091565b6000806000905060005b83518160ff16101561359757613577848260ff168151811061356a576135696141a2565b5b60200260200101516135a1565b826135829190614686565b9150808061358f906146bb565b915050613545565b5080915050919050565b600080826000015190506000600c8111156135bf576135be613c7c565b5b81600c8111156135d2576135d1613c7c565b5b036135e157600191505061385a565b6001600c8111156135f5576135f4613c7c565b5b81600c81111561360857613607613c7c565b5b0361361757600291505061385a565b6002600c81111561362b5761362a613c7c565b5b81600c81111561363e5761363d613c7c565b5b0361364d57600391505061385a565b6003600c81111561366157613660613c7c565b5b81600c81111561367457613673613c7c565b5b0361368357600491505061385a565b6004600c81111561369757613696613c7c565b5b81600c8111156136aa576136a9613c7c565b5b036136b957600591505061385a565b6005600c8111156136cd576136cc613c7c565b5b81600c8111156136e0576136df613c7c565b5b036136ef57600691505061385a565b6006600c81111561370357613702613c7c565b5b81600c81111561371657613715613c7c565b5b0361372557600791505061385a565b6007600c81111561373957613738613c7c565b5b81600c81111561374c5761374b613c7c565b5b0361375b57600891505061385a565b6008600c81111561376f5761376e613c7c565b5b81600c81111561378257613781613c7c565b5b0361379157600991505061385a565b6009600c8111156137a5576137a4613c7c565b5b81600c8111156137b8576137b7613c7c565b5b14806137e85750600a600c8111156137d3576137d2613c7c565b5b81600c8111156137e6576137e5613c7c565b5b145b806138175750600b600c81111561380257613801613c7c565b5b81600c81111561381557613814613c7c565b5b145b806138455750600c808111156138305761382f613c7c565b5b81600c81111561384357613842613c7c565b5b145b1561385457600a91505061385a565b60009150505b919050565b60405180604001604052806000600c81111561387e5761387d613c7c565b5b81526020016000600381111561389757613896613c7c565b5b81525090565b50805460008255906000526020600020908101906138bb91906138be565b50565b5b808211156138f957600080820160006101000a81549060ff02191690556000820160016101000a81549060ff0219169055506001016138bf565b5090565b6000819050919050565b613910816138fd565b82525050565b600060208201905061392b6000830184613907565b92915050565b6000604051905090565b600080fd5b600080fd5b61394e816138fd565b811461395957600080fd5b50565b60008135905061396b81613945565b92915050565b6000602082840312156139875761398661393b565b5b60006139958482850161395c565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139ec826139a3565b810181811067ffffffffffffffff82111715613a0b57613a0a6139b4565b5b80604052505050565b6000613a1e613931565b9050613a2a82826139e3565b919050565b600067ffffffffffffffff821115613a4a57613a496139b4565b5b602082029050602081019050919050565b600080fd5b6000613a73613a6e84613a2f565b613a14565b90508083825260208201905060208402830185811115613a9657613a95613a5b565b5b835b81811015613abf5780613aab888261395c565b845260208401935050602081019050613a98565b5050509392505050565b600082601f830112613ade57613add61399e565b5b8135613aee848260208601613a60565b91505092915050565b60008060408385031215613b0e57613b0d61393b565b5b6000613b1c8582860161395c565b925050602083013567ffffffffffffffff811115613b3d57613b3c613940565b5b613b4985828601613ac9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613b7e82613b53565b9050919050565b613b8e81613b73565b8114613b9957600080fd5b50565b600081359050613bab81613b85565b92915050565b600060208284031215613bc757613bc661393b565b5b6000613bd584828501613b9c565b91505092915050565b60008115159050919050565b613bf381613bde565b82525050565b6000602082019050613c0e6000830184613bea565b92915050565b6000613c1f82613b53565b9050919050565b613c2f81613c14565b82525050565b6000602082019050613c4a6000830184613c26565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600d8110613cbc57613cbb613c7c565b5b50565b6000819050613ccd82613cab565b919050565b6000613cdd82613cbf565b9050919050565b613ced81613cd2565b82525050565b60048110613d0457613d03613c7c565b5b50565b6000819050613d1582613cf3565b919050565b6000613d2582613d07565b9050919050565b613d3581613d1a565b82525050565b604082016000820151613d516000850182613ce4565b506020820151613d646020850182613d2c565b50505050565b6000613d768383613d3b565b60408301905092915050565b6000602082019050919050565b6000613d9a82613c50565b613da48185613c5b565b9350613daf83613c6c565b8060005b83811015613de0578151613dc78882613d6a565b9750613dd283613d82565b925050600181019050613db3565b5085935050505092915050565b60006020820190508181036000830152613e078184613d8f565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613e4481613b73565b82525050565b6000613e568383613e3b565b60208301905092915050565b6000602082019050919050565b6000613e7a82613e0f565b613e848185613e1a565b9350613e8f83613e2b565b8060005b83811015613ec0578151613ea78882613e4a565b9750613eb283613e62565b925050600181019050613e93565b5085935050505092915050565b60006020820190508181036000830152613ee78184613e6f565b905092915050565b600081905092915050565b50565b6000613f0a600083613eef565b9150613f1582613efa565b600082019050919050565b6000613f2b82613efd565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000613f7c601083613f35565b9150613f8782613f46565b602082019050919050565b60006020820190508181036000830152613fab81613f6f565b9050919050565b613fbb81613b73565b82525050565b6000604082019050613fd66000830185613fb2565b613fe36020830184613fb2565b9392505050565b6040820160008201516140006000850182613ce4565b5060208201516140136020850182613d2c565b50505050565b600060408201905061402e6000830184613fea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061406e826138fd565b9150614079836138fd565b9250828202614087816138fd565b9150828204841483151761409e5761409d614034565b5b5092915050565b60006040820190506140ba6000830185613907565b6140c76020830184613907565b9392505050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000614104601983613f35565b915061410f826140ce565b602082019050919050565b60006020820190508181036000830152614133816140f7565b9050919050565b6000614145826138fd565b9150614150836138fd565b925082820390508181111561416857614167614034565b5b92915050565b6000614179826138fd565b9150614184836138fd565b925082820190508082111561419c5761419b614034565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006141dc826138fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361420e5761420d614034565b5b600182019050919050565b600060608201905061422e6000830186613fb2565b61423b6020830185613907565b6142486040830184613907565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061428a826138fd565b9150614295836138fd565b9250826142a5576142a4614250565b5b828204905092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600060ff82169050919050565b60006142fd6142f8836142d0565b6142dd565b9050919050565b60008160081c9050919050565b600060ff82169050919050565b600061433161432c83614304565b614311565b9050919050565b60408201600080830154905061434d816142ea565b61435a6000860182613ce4565b506143648161431e565b6143716020860182613d2c565b5050505050565b60006143848383614338565b60408301905092915050565b6000600182019050919050565b60006143a8826142b0565b6143b28185613c5b565b93506143bd836142bb565b8060005b838110156143ed57816143d48882614378565b97506143df83614390565b9250506001810190506143c1565b5085935050505092915050565b60006020820190508181036000830152614414818461439d565b905092915050565b6000819050919050565b61442f8161441c565b82525050565b600067ffffffffffffffff82169050919050565b61445281614435565b82525050565b600061ffff82169050919050565b61446f81614458565b82525050565b600063ffffffff82169050919050565b61448e81614475565b82525050565b6000819050919050565b6000819050919050565b60006144c36144be6144b984614494565b61449e565b614475565b9050919050565b6144d3816144a8565b82525050565b600060a0820190506144ee6000830188614426565b6144fb6020830187614449565b6145086040830186614466565b6145156060830185614485565b61452260808301846144ca565b9695505050505050565b60008151905061453b81613945565b92915050565b6000602082840312156145575761455661393b565b5b60006145658482850161452c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6040820160008083015490506145b2816142ea565b6145bf6000860182613ce4565b506145c98161431e565b6145d66020860182613d2c565b5050505050565b60006060820190506145f2600083018561459d565b8181036040830152614604818461439d565b90509392505050565b7f4465636b20697320656d70747900000000000000000000000000000000000000600082015250565b6000614643600d83613f35565b915061464e8261460d565b602082019050919050565b6000602082019050818103600083015261467281614636565b9050919050565b600060ff82169050919050565b600061469182614679565b915061469c83614679565b9250828201905060ff8111156146b5576146b4614034565b5b92915050565b60006146c682614679565b915060ff82036146d9576146d8614034565b5b600182019050919050565b6146ed81614679565b82525050565b60006040820190506147086000830185613907565b61471560208301846146e4565b9392505050565b6000614727826138fd565b9150614732836138fd565b92508261474257614741614250565b5b828206905092915050565b600061475882614679565b91506000820361476b5761476a614034565b5b60018203905091905056fea2646970667358221220717a424a55f10ff5576bb5d01c43b5bed751d7c86a18a10da886ebed4476a1ad64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1156,
        "contract": "contracts/Blackjack.sol:Blackjack",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1160,
        "contract": "contracts/Blackjack.sol:Blackjack",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1165,
        "contract": "contracts/Blackjack.sol:Blackjack",
        "label": "s_states",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(GameState)1212_storage)"
      },
      {
        "astId": 1169,
        "contract": "contracts/Blackjack.sol:Blackjack",
        "label": "s_requestIdToPlayer",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Card)1197_storage)dyn_storage": {
        "base": "t_struct(Card)1197_storage",
        "encoding": "dynamic_array",
        "label": "struct Blackjack.Card[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(CardSuit)1190": {
        "encoding": "inplace",
        "label": "enum Blackjack.CardSuit",
        "numberOfBytes": "1"
      },
      "t_enum(CardValue)1185": {
        "encoding": "inplace",
        "label": "enum Blackjack.CardValue",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(GameState)1212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Blackjack.GameState)",
        "numberOfBytes": "32",
        "value": "t_struct(GameState)1212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Card)1197_storage": {
        "encoding": "inplace",
        "label": "struct Blackjack.Card",
        "members": [
          {
            "astId": 1193,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CardValue)1185"
          },
          {
            "astId": 1196,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "suit",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(CardSuit)1190"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GameState)1212_storage": {
        "encoding": "inplace",
        "label": "struct Blackjack.GameState",
        "members": [
          {
            "astId": 1201,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "dealerHand",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1205,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "playerHand",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1209,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "deck",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Card)1197_storage)dyn_storage"
          },
          {
            "astId": 1211,
            "contract": "contracts/Blackjack.sol:Blackjack",
            "label": "isStarted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}