{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/Blackjack.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\n// ---------- Custom Errors ----------\nerror Blackjack__DealerHasNotEnoughCollateral(uint256 dealerBalance, uint256 playerBalance);\nerror Blackjack__GameNotFunded();\nerror Blackjack__GameMustNotBeStarted();\nerror Blackjack__GameMustBeStarted();\nerror Blackjack__WrongAmountToDoubleWager(address player, uint256 amountNeeded, uint256 amountReceived);\nerror Blackjack__PlayerHandMustBeAPair();\nerror Blackjack__OnlyOwner();\n\ncontract Blackjack is VRFConsumerBaseV2 {\n    // ---------- Chainlink VRF variables ----------\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callbackGasLimit;\n\n    // ---------- Players' states and proceeds ----------\n    address[] private s_players; // addresses of the players having more than 0 in their proceeds\n    mapping(address => uint256) internal s_proceeds;\n    mapping(address => GameState) internal s_states;\n    mapping(uint256 => address) private s_requestIdToPlayer;\n\n    // ---------- Dealer's address ----------\n    address payable public immutable i_dealer;\n\n    // ---------- Card values and suits ----------\n    enum CardValue {\n        Ace,\n        Two,\n        Three,\n        Four,\n        Five,\n        Six,\n        Seven,\n        Eight,\n        Nine,\n        Ten,\n        Jack,\n        Queen,\n        King\n    }\n    enum CardSuit {\n        club,\n        diamond,\n        heart,\n        spade\n    }\n    struct Card {\n        CardValue value;\n        CardSuit suit;\n    }\n\n    // ---------- Game state for each player ----------\n    struct GameState {\n        Card[] dealerHand; //the first card is the hidden Card of the dealer\n        Card[] playerHand;\n        Card[] deck; //the deck is beeing dealt from the last card to the first one.\n        bool isStarted;\n    }\n\n    // ---------- Events ----------\n    event GameFunded(address indexed player, uint256 amount);\n    event DealerFunded(address indexed player, uint256 amount);\n    event GameStarted(address indexed player, Card visibleDealerCard, Card[] playerHand);\n    event GameLost(address indexed player, Card[] dealerHand);\n    event GameTie(address indexed player, Card[] dealerHand);\n    event GameWon(address indexed player, Card[] dealerHand);\n    event GameSurrended(address indexed player, Card[] dealerHand);\n    event GameHit(address indexed player, Card drawnCard);\n    event GameSplit(address indexed player, Card[] playerHand);\n    event GameDoubledDown(address indexed player);\n    event RequestedRandomWord(address indexed player, uint256 requestId);\n\n    // ---------- Constructor ----------\n    constructor(\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        i_dealer = payable(msg.sender);\n    }\n\n    // ---------- Modifiers ----------\n    modifier NotEnoughCollateral() {\n        uint256 availableCollateral = getAvailableProceeds();\n        if (availableCollateral < msg.value * 2) {\n            revert Blackjack__DealerHasNotEnoughCollateral(availableCollateral, msg.value);\n        }\n        _;\n    }\n    modifier GameNotFunded() {\n        if (s_proceeds[msg.sender] <= 0) {\n            revert Blackjack__GameNotFunded();\n        }\n        _;\n    }\n    modifier GameMustNotBeStarted() {\n        if (s_states[msg.sender].isStarted) {\n            revert Blackjack__GameMustNotBeStarted();\n        }\n        _;\n    }\n    modifier GameMustBeStarted() {\n        if (!s_states[msg.sender].isStarted) {\n            revert Blackjack__GameMustBeStarted();\n        }\n        _;\n    }\n    modifier WrongAmountToDoubleWager() {\n        if (s_proceeds[payable(msg.sender)] != msg.value) {\n            revert Blackjack__WrongAmountToDoubleWager(msg.sender, s_proceeds[payable(msg.sender)], msg.value);\n        }\n        _;\n    }\n    modifier PlayerHandMustBeAPair() {\n        Card[] memory playerHand = s_states[msg.sender].playerHand;\n        bool playerHandIsAPair = playerHand.length == 2 && playerHand[0].value == playerHand[1].value;\n        if (!playerHandIsAPair) {\n            revert Blackjack__PlayerHandMustBeAPair();\n        }\n        _;\n    }\n    modifier OnlyOwner() {\n        if (msg.sender != i_dealer) {\n            revert Blackjack__OnlyOwner();\n        }\n\n        _;\n    }\n\n    // ---------- 1. Game Mechanics ----------\n    function getCardPoints(Card memory card) internal pure returns (uint8) {\n        CardValue cardValue = card.value; // Access the value from the Card struct\n        if (cardValue == CardValue.Ace) {\n            return 1; // Ace can be 1 or 11, but we'll return 1 as the default\n        } else if (cardValue == CardValue.Two) {\n            return 2;\n        } else if (cardValue == CardValue.Three) {\n            return 3;\n        } else if (cardValue == CardValue.Four) {\n            return 4;\n        } else if (cardValue == CardValue.Five) {\n            return 5;\n        } else if (cardValue == CardValue.Six) {\n            return 6;\n        } else if (cardValue == CardValue.Seven) {\n            return 7;\n        } else if (cardValue == CardValue.Eight) {\n            return 8;\n        } else if (cardValue == CardValue.Nine) {\n            return 9;\n        } else if (\n            cardValue == CardValue.Ten ||\n            cardValue == CardValue.Jack ||\n            cardValue == CardValue.Queen ||\n            cardValue == CardValue.King\n        ) {\n            return 10;\n        }\n        return 0;\n    }\n    function initDeck(Card[] storage deck) internal {\n        for (uint8 s = 0; s < 4; s++) {\n            for (uint8 v = 0; v < 13; v++) {\n                deck.push(Card(CardValue(v), CardSuit(s)));\n            }\n        }\n    }\n    function shuffleDeck(uint256 randomWord, Card[] storage deck) internal {\n        for (uint8 i = 51; i > 0; i--) {\n            uint8 j = uint8(uint256(keccak256(abi.encode(randomWord, i))) % (i + 1));\n            Card memory temp = deck[i];\n            deck[i] = deck[j];\n            deck[j] = temp;\n        }\n    }\n    // Draw a card from the deck (removes the last element and returns it)\n    function drawACard(Card[] storage deck) internal returns (Card memory) {\n        require(deck.length > 0, \"Deck is empty\");\n        Card memory drawnCard = deck[deck.length - 1];\n        deck.pop();\n        return drawnCard;\n    }\n    function finishGameIfScoreAbove21(GameState storage gameState, address player) internal {\n        uint8 score = computeHighestValidScore(gameState.playerHand);\n        if (score > 21) {\n            emit GameLost(player, gameState.dealerHand);\n            delete s_states[player];\n            s_proceeds[player] = 0;\n            removeElement(s_players, player);\n        } else if (score == 21) {\n            uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\n            if (dealerScore == 21) {\n                emit GameTie(player, gameState.dealerHand);\n                delete s_states[player];\n            } else {\n                emit GameWon(player, gameState.dealerHand);\n                delete s_states[player];\n                s_proceeds[player] += s_proceeds[player] / 2;\n            }\n        }\n    }\n    function removeElement(address[] storage array, address value) internal {\n        for (uint i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                array[i] = array[array.length - 1]; // Replace with the last element\n                array.pop(); // Remove the last element\n                break;\n            }\n        }\n    }\n    function removeFirstAce(Card[] memory cards) internal pure returns (bool, Card[] memory) {\n        for (uint8 i = 0; i < cards.length; i++) {\n            if (cards[i].value == CardValue.Ace) {\n                // Remove the Ace by shifting elements to the left\n                for (uint8 j = i; j < cards.length - 1; j++) {\n                    cards[j] = cards[j + 1];\n                }\n                // Reduce the array length by 1\n                assembly {\n                    mstore(cards, sub(mload(cards), 1))\n                }\n                return (true, cards);\n            }\n        }\n        return (false, cards); // No Ace found, return unchanged array\n    }\n    function computeScore(Card[] memory cards) internal pure returns (uint8) {\n        uint8 score = 0;\n        for (uint8 i = 0; i < cards.length; i++) {\n            score = score + getCardPoints(cards[i]);\n        }\n        return score;\n    }\n    function computeHighestValidScore(Card[] memory cards) internal pure returns (uint8) {\n        uint8 score;\n        (bool hasAce, Card[] memory cardsWhithoutFirstAce) = removeFirstAce(cards);\n        if (hasAce) {\n            uint8 highScore = 11 + computeScore(cardsWhithoutFirstAce);\n            if (highScore > 21) {\n                uint8 lowScore = 1 + computeScore(cardsWhithoutFirstAce);\n                score = lowScore;\n            } else {\n                score = highScore;\n            }\n        } else {\n            score = computeScore(cards);\n        }\n        return score;\n    }\n    function dealerPlays(GameState storage gameState) internal {\n        uint8 score = computeHighestValidScore(gameState.dealerHand);\n        while (score < 17) {\n            gameState.dealerHand.push(drawACard(gameState.deck));\n            score = computeHighestValidScore(gameState.dealerHand);\n        }\n    }\n\n    // ---------- 2. Player Actions ----------\n    function hit() public GameMustBeStarted {\n        address player = msg.sender;\n        GameState storage gameState = s_states[player];\n        Card memory card = drawACard(gameState.deck);\n        gameState.playerHand.push(card);\n        emit GameHit(player, card);\n        finishGameIfScoreAbove21(gameState, player);\n    }\n    function stand() public GameMustBeStarted {\n        GameState storage gameState = s_states[msg.sender];\n        address player = msg.sender;\n        uint8 playerScore = computeHighestValidScore(gameState.playerHand);\n        uint8 dealerScore = computeHighestValidScore(gameState.dealerHand);\n        dealerPlays(gameState);\n        if (playerScore == dealerScore) {\n            emit GameTie(player, gameState.dealerHand);\n            delete s_states[player];\n        } else if (playerScore < dealerScore) {\n            emit GameLost(player, gameState.dealerHand);\n            delete s_states[player];\n            s_proceeds[player] = 0;\n            removeElement(s_players, player);\n        } else {\n            emit GameWon(player, gameState.dealerHand);\n            delete s_states[player];\n            s_proceeds[player] = s_proceeds[player] * 2;\n        }\n    }\n    function doubleDown() public payable GameMustBeStarted WrongAmountToDoubleWager {\n        s_proceeds[msg.sender] += msg.value;\n        emit GameDoubledDown(msg.sender);\n        hit();\n        stand();\n    }\n    function split() public payable GameMustBeStarted WrongAmountToDoubleWager PlayerHandMustBeAPair {\n        s_proceeds[msg.sender] += msg.value;\n        address player = msg.sender;\n        GameState storage gameState = s_states[player];\n        gameState.playerHand.pop();\n        emit GameSplit(msg.sender, gameState.playerHand);\n    }\n    function surrender() public GameMustBeStarted {\n        GameState storage gameState = s_states[msg.sender];\n        s_proceeds[msg.sender] -= s_proceeds[msg.sender] / 2;\n        delete s_states[msg.sender];\n        emit GameSurrended(msg.sender, gameState.dealerHand);\n    }\n\n    // ---------- 3. Chainlink VRF and Game Start ----------\n    function startAGame() public GameNotFunded GameMustNotBeStarted {\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            1\n        );\n        s_requestIdToPlayer[requestId] = msg.sender;\n        emit RequestedRandomWord(msg.sender, requestId);\n    }\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n        address player = s_requestIdToPlayer[requestId];\n        GameState storage gameState = s_states[player];\n        initDeck(gameState.deck);\n        shuffleDeck(randomWords[0], gameState.deck);\n\n        gameState.dealerHand.push(drawACard(gameState.deck));\n        gameState.dealerHand.push(drawACard(gameState.deck));\n        gameState.playerHand.push(drawACard(gameState.deck));\n        gameState.playerHand.push(drawACard(gameState.deck));\n        gameState.isStarted = true;\n        emit GameStarted(player, gameState.dealerHand[1], gameState.playerHand);\n        finishGameIfScoreAbove21(gameState, player);\n        delete s_requestIdToPlayer[requestId];\n    }\n\n    // ---------- 4. Dealer Fund and Proceeds Management ----------\n    receive() external payable {\n        emit DealerFunded(msg.sender, msg.value);\n    }\n    function getLockedProceeds() public view returns (uint256) {\n        uint256 lockedProceeds = 0;\n        for (uint256 i = 0; i < s_players.length; i += 1) {\n            lockedProceeds += s_proceeds[s_players[i]];\n        }\n        return lockedProceeds;\n    }\n    function getAvailableProceeds() public view returns (uint256) {\n        uint256 balance = viewBalanceOfOwner();\n        uint256 lockedProceeds = getLockedProceeds() * 2;\n        if (lockedProceeds > balance) {\n            return 0;\n        }\n        return balance - lockedProceeds;\n    }\n    function withdrawMoneyToOwner(uint256 amount) external OnlyOwner {\n        uint256 maximumAmount = getAvailableProceeds();\n        if (amount > maximumAmount) {\n            amount = maximumAmount;\n        }\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function fundAGame() external payable NotEnoughCollateral GameMustNotBeStarted {\n        s_players.push(msg.sender);\n        s_proceeds[payable(msg.sender)] = msg.value;\n        emit GameFunded(msg.sender, msg.value);\n    }\n\n    function viewBalanceOfOwner() public view returns (uint256) {\n        return address(this).balance;\n    }\n    function getProceeds(address player) public view returns (uint256) {\n        return s_proceeds[player];\n    }\n    function withdrawMoneyToPlayer() public GameMustNotBeStarted {\n        removeElement(s_players, msg.sender);\n        (bool success, ) = payable(msg.sender).call{value: s_proceeds[msg.sender]}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    // ---------- 5. View game state functions ----------\n    function getPlayerHand(address player) public view returns (Card[] memory) {\n        return s_states[player].playerHand;\n    }\n    function getVisibleDealerHand(address player) public view returns (Card[] memory) {\n        Card[] memory fullHand = s_states[player].dealerHand;\n        uint256 startIndex = 1;\n        require(startIndex < fullHand.length, \"Start index out of bounds\");\n        uint256 newLength = fullHand.length - startIndex;\n        Card[] memory visibleHand = new Card[](newLength);\n        for (uint256 i = 0; i < newLength; i++) {\n            visibleHand[i] = fullHand[startIndex + i];\n        }\n        return visibleHand;\n    }\n    function getGameStatus(address player) public view returns (bool) {\n        return s_states[player].isStarted;\n    }\n    function getPlayers() public view returns (address[] memory) {\n        return s_players;\n    }\n}\n"
    },
    "contracts/test/BlackjackTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../Blackjack.sol\";\n\ncontract BlackjackTest is Blackjack {\n    constructor(\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit\n    ) Blackjack(vrfCoordinatorV2, gasLane, subscriptionId, callbackGasLimit) {}\n    function testGetCardPoints(Card memory card) public pure returns (uint8) {\n        return super.getCardPoints(card);\n    }\n    function testInitDeck(address player) public {\n        GameState storage gameState = s_states[player];\n        super.initDeck(gameState.deck);\n    }\n\n    function setPlayerHand(address player, Card[] memory playerHand) public {\n        for (uint i = 0; i < playerHand.length; i++) {\n            s_states[player].playerHand.push(playerHand[i]);\n        }\n    }\n    function setDealerHand(address player, Card[] memory dealerHand) public {\n        for (uint i = 0; i < dealerHand.length; i++) {\n            s_states[player].dealerHand.push(dealerHand[i]);\n        }\n    }\n    function setProceeds(address player, uint256 proceeds) public {\n        s_proceeds[player] = proceeds;\n    }\n    function setGameStatus(address player, bool isStarted) public {\n        s_states[player].isStarted = isStarted;\n    }\n    function getDeck(address player) public view returns (Card[] memory) {\n        return s_states[player].deck;\n    }\n    function getDealerHand(address player) public view returns (Card[] memory) {\n        return s_states[player].dealerHand;\n    }\n\n    function testShuffleDeck(address player, uint256 randomWord) public {\n        super.shuffleDeck(randomWord, s_states[player].deck);\n    }\n    function testDrawACard(address player) public returns (Card memory) {\n        return super.drawACard(s_states[player].deck);\n    }\n    function testFinishGameIfScoreIsAbove21(address player) public {\n        super.finishGameIfScoreAbove21(s_states[player], player);\n    }\n    function testRemoveFirstAce(Card[] memory cards) public pure returns (bool, Card[] memory) {\n        return super.removeFirstAce(cards);\n    }\n    function testComputeScore(Card[] memory cards) public pure returns (uint8) {\n        return super.computeScore(cards);\n    }\n    function testComputeHighestValidScore(Card[] memory cards) public pure returns (uint8) {\n        return super.computeHighestValidScore(cards);\n    }\n    function testDealerPlays(address player) public {\n        super.dealerPlays(s_states[player]);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}